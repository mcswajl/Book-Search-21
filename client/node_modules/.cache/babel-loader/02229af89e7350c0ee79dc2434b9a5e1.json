{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\r\n * Unique type names\r\n *\r\n * A GraphQL document is only valid if all defined types have unique names.\r\n */\n\nexport function UniqueTypeNamesRule(context) {\n  const knownTypeNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n\n  function checkTypeName(node) {\n    const typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(new GraphQLError(`Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`, node.name));\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(new GraphQLError(`There can be only one type named \"${typeName}\".`, [knownTypeNames[typeName], node.name]));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs"],"names":["GraphQLError","UniqueTypeNamesRule","context","knownTypeNames","Object","create","schema","getSchema","ScalarTypeDefinition","checkTypeName","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","InputObjectTypeDefinition","node","typeName","name","value","getType","reportError"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;;;;;;AAKA,OAAO,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;AAC3C,QAAMC,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvB;AACA,QAAMC,MAAM,GAAGJ,OAAO,CAACK,SAAR,EAAf;AACA,SAAO;AACLC,IAAAA,oBAAoB,EAAEC,aADjB;AAELC,IAAAA,oBAAoB,EAAED,aAFjB;AAGLE,IAAAA,uBAAuB,EAAEF,aAHpB;AAILG,IAAAA,mBAAmB,EAAEH,aAJhB;AAKLI,IAAAA,kBAAkB,EAAEJ,aALf;AAMLK,IAAAA,yBAAyB,EAAEL;AANtB,GAAP;;AASA,WAASA,aAAT,CAAuBM,IAAvB,EAA6B;AAC3B,UAAMC,QAAQ,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAA3B;;AAEA,QAAIZ,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,IAAwCA,MAAM,CAACa,OAAP,CAAeH,QAAf,CAA5C,EAAsE;AACpEd,MAAAA,OAAO,CAACkB,WAAR,CACE,IAAIpB,YAAJ,CACG,SAAQgB,QAAS,oFADpB,EAEED,IAAI,CAACE,IAFP,CADF;AAMA;AACD;;AAED,QAAId,cAAc,CAACa,QAAD,CAAlB,EAA8B;AAC5Bd,MAAAA,OAAO,CAACkB,WAAR,CACE,IAAIpB,YAAJ,CAAkB,qCAAoCgB,QAAS,IAA/D,EAAoE,CAClEb,cAAc,CAACa,QAAD,CADoD,EAElED,IAAI,CAACE,IAF6D,CAApE,CADF;AAMD,KAPD,MAOO;AACLd,MAAAA,cAAc,CAACa,QAAD,CAAd,GAA2BD,IAAI,CAACE,IAAhC;AACD;;AAED,WAAO,KAAP;AACD;AACF","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\r\n\r\n/**\r\n * Unique type names\r\n *\r\n * A GraphQL document is only valid if all defined types have unique names.\r\n */\r\nexport function UniqueTypeNamesRule(context) {\r\n  const knownTypeNames = Object.create(null);\r\n  const schema = context.getSchema();\r\n  return {\r\n    ScalarTypeDefinition: checkTypeName,\r\n    ObjectTypeDefinition: checkTypeName,\r\n    InterfaceTypeDefinition: checkTypeName,\r\n    UnionTypeDefinition: checkTypeName,\r\n    EnumTypeDefinition: checkTypeName,\r\n    InputObjectTypeDefinition: checkTypeName,\r\n  };\r\n\r\n  function checkTypeName(node) {\r\n    const typeName = node.name.value;\r\n\r\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\r\n      context.reportError(\r\n        new GraphQLError(\r\n          `Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`,\r\n          node.name,\r\n        ),\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (knownTypeNames[typeName]) {\r\n      context.reportError(\r\n        new GraphQLError(`There can be only one type named \"${typeName}\".`, [\r\n          knownTypeNames[typeName],\r\n          node.name,\r\n        ]),\r\n      );\r\n    } else {\r\n      knownTypeNames[typeName] = node.name;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}