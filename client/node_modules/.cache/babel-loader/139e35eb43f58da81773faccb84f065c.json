{"ast":null,"code":"import { getLocation } from './location.mjs';\n/**\r\n * Render a helpful description of the location in the GraphQL Source document.\r\n */\n\nexport function printLocation(location) {\n  return printSourceLocation(location.source, getLocation(location.source, location.start));\n}\n/**\r\n * Render a helpful description of the location in the GraphQL Source document.\r\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return locationStr + printPrefixedLines([[`${lineNum} |`, subLines[0]], ...subLines.slice(1, subLineIndex + 1).map(subLine => ['|', subLine]), ['|', '^'.padStart(subLineColumnNum)], ['|', subLines[subLineIndex + 1]]]);\n  }\n\n  return locationStr + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [`${lineNum - 1} |`, lines[lineIndex - 1]], [`${lineNum} |`, locationLine], ['|', '^'.padStart(columnNum)], [`${lineNum + 1} |`, lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines.map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : '')).join('\\n');\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/language/printLocation.mjs"],"names":["getLocation","printLocation","location","printSourceLocation","source","start","sourceLocation","firstLineColumnOffset","locationOffset","column","body","padStart","lineIndex","line","lineOffset","lineNum","columnOffset","columnNum","locationStr","name","lines","split","locationLine","length","subLineIndex","Math","floor","subLineColumnNum","subLines","i","push","slice","printPrefixedLines","map","subLine","existingLines","filter","_","undefined","padLen","max","prefix","join"],"mappings":"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","sourcesContent":["import { getLocation } from './location.mjs';\r\n/**\r\n * Render a helpful description of the location in the GraphQL Source document.\r\n */\r\n\r\nexport function printLocation(location) {\r\n  return printSourceLocation(\r\n    location.source,\r\n    getLocation(location.source, location.start),\r\n  );\r\n}\r\n/**\r\n * Render a helpful description of the location in the GraphQL Source document.\r\n */\r\n\r\nexport function printSourceLocation(source, sourceLocation) {\r\n  const firstLineColumnOffset = source.locationOffset.column - 1;\r\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\r\n  const lineIndex = sourceLocation.line - 1;\r\n  const lineOffset = source.locationOffset.line - 1;\r\n  const lineNum = sourceLocation.line + lineOffset;\r\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\r\n  const columnNum = sourceLocation.column + columnOffset;\r\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\r\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\r\n  const locationLine = lines[lineIndex]; // Special case for minified documents\r\n\r\n  if (locationLine.length > 120) {\r\n    const subLineIndex = Math.floor(columnNum / 80);\r\n    const subLineColumnNum = columnNum % 80;\r\n    const subLines = [];\r\n\r\n    for (let i = 0; i < locationLine.length; i += 80) {\r\n      subLines.push(locationLine.slice(i, i + 80));\r\n    }\r\n\r\n    return (\r\n      locationStr +\r\n      printPrefixedLines([\r\n        [`${lineNum} |`, subLines[0]],\r\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\r\n        ['|', '^'.padStart(subLineColumnNum)],\r\n        ['|', subLines[subLineIndex + 1]],\r\n      ])\r\n    );\r\n  }\r\n\r\n  return (\r\n    locationStr +\r\n    printPrefixedLines([\r\n      // Lines specified like this: [\"prefix\", \"string\"],\r\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\r\n      [`${lineNum} |`, locationLine],\r\n      ['|', '^'.padStart(columnNum)],\r\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\r\n    ])\r\n  );\r\n}\r\n\r\nfunction printPrefixedLines(lines) {\r\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\r\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\r\n  return existingLines\r\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\r\n    .join('\\n');\r\n}\r\n"]},"metadata":{},"sourceType":"module"}