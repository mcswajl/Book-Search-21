{"ast":null,"code":"import { inspect } from '../jsutils/inspect.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { assertName } from './assertName.mjs';\nimport { GraphQLString, GraphQLBoolean } from './scalars.mjs';\nimport { defineArguments, argsToArgsConfig, GraphQLNonNull } from './definition.mjs';\n/**\r\n * Test if the given value is a GraphQL directive.\r\n */\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(`Expected ${inspect(directive)} to be a GraphQL directive.`);\n  }\n\n  return directive;\n}\n/**\r\n * Custom extensions\r\n *\r\n * @remarks\r\n * Use a unique identifier name for your extension, for example the name of\r\n * your library or project. Do not use a shortened identifier as this increases\r\n * the risk of conflicts. We recommend you add at most one extension field,\r\n * an object which can contain all the values you need.\r\n */\n\n/**\r\n * Directives are used by the GraphQL runtime as a way of modifying execution\r\n * behavior. Type system creators will usually not create these directly.\r\n */\n\nexport class GraphQLDirective {\n  constructor(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) || devAssert(false, `@${config.name} locations must be an Array.`);\n    const args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};\n    isObjectLike(args) && !Array.isArray(args) || devAssert(false, `@${config.name} args must be an object with argument names as keys.`);\n    this.args = defineArguments(args);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode\n    };\n  }\n\n  toString() {\n    return '@' + this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n}\n/**\r\n * Used to conditionally include fields or fragments.\r\n */\n\nexport const GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.'\n    }\n  }\n});\n/**\r\n * Used to conditionally skip (exclude) fields or fragments.\r\n */\n\nexport const GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.'\n    }\n  }\n});\n/**\r\n * Constant string used for default reason for a deprecation.\r\n */\n\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\r\n * Used to declare element of a GraphQL schema as deprecated.\r\n */\n\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ARGUMENT_DEFINITION, DirectiveLocation.INPUT_FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON\n    }\n  }\n});\n/**\r\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\r\n */\n\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.'\n    }\n  }\n});\n/**\r\n * The full list of specified directives.\r\n */\n\nexport const specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({\n    name\n  }) => name === directive.name);\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/type/directives.mjs"],"names":["inspect","toObjMap","devAssert","instanceOf","isObjectLike","DirectiveLocation","assertName","GraphQLString","GraphQLBoolean","defineArguments","argsToArgsConfig","GraphQLNonNull","isDirective","directive","GraphQLDirective","assertDirective","Error","constructor","config","_config$isRepeatable","_config$args","name","description","locations","isRepeatable","extensions","astNode","Array","isArray","args","Symbol","toStringTag","toConfig","toString","toJSON","GraphQLIncludeDirective","FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT","if","type","GraphQLSkipDirective","DEFAULT_DEPRECATION_REASON","GraphQLDeprecatedDirective","FIELD_DEFINITION","ARGUMENT_DEFINITION","INPUT_FIELD_DEFINITION","ENUM_VALUE","reason","defaultValue","GraphQLSpecifiedByDirective","SCALAR","url","specifiedDirectives","Object","freeze","isSpecifiedDirective","some"],"mappings":"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","sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\r\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\r\nimport { devAssert } from '../jsutils/devAssert.mjs';\r\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\r\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\r\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\r\nimport { assertName } from './assertName.mjs';\r\nimport { GraphQLString, GraphQLBoolean } from './scalars.mjs';\r\nimport {\r\n  defineArguments,\r\n  argsToArgsConfig,\r\n  GraphQLNonNull,\r\n} from './definition.mjs';\r\n/**\r\n * Test if the given value is a GraphQL directive.\r\n */\r\n\r\nexport function isDirective(directive) {\r\n  return instanceOf(directive, GraphQLDirective);\r\n}\r\nexport function assertDirective(directive) {\r\n  if (!isDirective(directive)) {\r\n    throw new Error(\r\n      `Expected ${inspect(directive)} to be a GraphQL directive.`,\r\n    );\r\n  }\r\n\r\n  return directive;\r\n}\r\n/**\r\n * Custom extensions\r\n *\r\n * @remarks\r\n * Use a unique identifier name for your extension, for example the name of\r\n * your library or project. Do not use a shortened identifier as this increases\r\n * the risk of conflicts. We recommend you add at most one extension field,\r\n * an object which can contain all the values you need.\r\n */\r\n\r\n/**\r\n * Directives are used by the GraphQL runtime as a way of modifying execution\r\n * behavior. Type system creators will usually not create these directly.\r\n */\r\nexport class GraphQLDirective {\r\n  constructor(config) {\r\n    var _config$isRepeatable, _config$args;\r\n\r\n    this.name = assertName(config.name);\r\n    this.description = config.description;\r\n    this.locations = config.locations;\r\n    this.isRepeatable =\r\n      (_config$isRepeatable = config.isRepeatable) !== null &&\r\n      _config$isRepeatable !== void 0\r\n        ? _config$isRepeatable\r\n        : false;\r\n    this.extensions = toObjMap(config.extensions);\r\n    this.astNode = config.astNode;\r\n    Array.isArray(config.locations) ||\r\n      devAssert(false, `@${config.name} locations must be an Array.`);\r\n    const args =\r\n      (_config$args = config.args) !== null && _config$args !== void 0\r\n        ? _config$args\r\n        : {};\r\n    (isObjectLike(args) && !Array.isArray(args)) ||\r\n      devAssert(\r\n        false,\r\n        `@${config.name} args must be an object with argument names as keys.`,\r\n      );\r\n    this.args = defineArguments(args);\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return 'GraphQLDirective';\r\n  }\r\n\r\n  toConfig() {\r\n    return {\r\n      name: this.name,\r\n      description: this.description,\r\n      locations: this.locations,\r\n      args: argsToArgsConfig(this.args),\r\n      isRepeatable: this.isRepeatable,\r\n      extensions: this.extensions,\r\n      astNode: this.astNode,\r\n    };\r\n  }\r\n\r\n  toString() {\r\n    return '@' + this.name;\r\n  }\r\n\r\n  toJSON() {\r\n    return this.toString();\r\n  }\r\n}\r\n\r\n/**\r\n * Used to conditionally include fields or fragments.\r\n */\r\nexport const GraphQLIncludeDirective = new GraphQLDirective({\r\n  name: 'include',\r\n  description:\r\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\r\n  locations: [\r\n    DirectiveLocation.FIELD,\r\n    DirectiveLocation.FRAGMENT_SPREAD,\r\n    DirectiveLocation.INLINE_FRAGMENT,\r\n  ],\r\n  args: {\r\n    if: {\r\n      type: new GraphQLNonNull(GraphQLBoolean),\r\n      description: 'Included when true.',\r\n    },\r\n  },\r\n});\r\n/**\r\n * Used to conditionally skip (exclude) fields or fragments.\r\n */\r\n\r\nexport const GraphQLSkipDirective = new GraphQLDirective({\r\n  name: 'skip',\r\n  description:\r\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\r\n  locations: [\r\n    DirectiveLocation.FIELD,\r\n    DirectiveLocation.FRAGMENT_SPREAD,\r\n    DirectiveLocation.INLINE_FRAGMENT,\r\n  ],\r\n  args: {\r\n    if: {\r\n      type: new GraphQLNonNull(GraphQLBoolean),\r\n      description: 'Skipped when true.',\r\n    },\r\n  },\r\n});\r\n/**\r\n * Constant string used for default reason for a deprecation.\r\n */\r\n\r\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\r\n/**\r\n * Used to declare element of a GraphQL schema as deprecated.\r\n */\r\n\r\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\r\n  name: 'deprecated',\r\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\r\n  locations: [\r\n    DirectiveLocation.FIELD_DEFINITION,\r\n    DirectiveLocation.ARGUMENT_DEFINITION,\r\n    DirectiveLocation.INPUT_FIELD_DEFINITION,\r\n    DirectiveLocation.ENUM_VALUE,\r\n  ],\r\n  args: {\r\n    reason: {\r\n      type: GraphQLString,\r\n      description:\r\n        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\r\n      defaultValue: DEFAULT_DEPRECATION_REASON,\r\n    },\r\n  },\r\n});\r\n/**\r\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\r\n */\r\n\r\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\r\n  name: 'specifiedBy',\r\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\r\n  locations: [DirectiveLocation.SCALAR],\r\n  args: {\r\n    url: {\r\n      type: new GraphQLNonNull(GraphQLString),\r\n      description: 'The URL that specifies the behavior of this scalar.',\r\n    },\r\n  },\r\n});\r\n/**\r\n * The full list of specified directives.\r\n */\r\n\r\nexport const specifiedDirectives = Object.freeze([\r\n  GraphQLIncludeDirective,\r\n  GraphQLSkipDirective,\r\n  GraphQLDeprecatedDirective,\r\n  GraphQLSpecifiedByDirective,\r\n]);\r\nexport function isSpecifiedDirective(directive) {\r\n  return specifiedDirectives.some(({ name }) => name === directive.name);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}