{"ast":null,"code":"import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport { printLocation, printSourceLocation } from '../language/printLocation.mjs';\n/**\r\n * Custom extensions\r\n *\r\n * @remarks\r\n * Use a unique identifier name for your extension, for example the name of\r\n * your library or project. Do not use a shortened identifier as this increases\r\n * the risk of conflicts. We recommend you add at most one extension field,\r\n * an object which can contain all the values you need.\r\n */\n\n/**\r\n * A GraphQLError describes an Error found during the parse, validate, or\r\n * execute phases of performing a GraphQL operation. In addition to a message\r\n * and stack trace, it also includes information about the locations in a\r\n * GraphQL document and/or execution result that correspond to the Error.\r\n */\n\nexport class GraphQLError extends Error {\n  /**\r\n   * An array of `{ line, column }` locations within the source GraphQL document\r\n   * which correspond to this error.\r\n   *\r\n   * Errors during validation often contain multiple locations, for example to\r\n   * point out two things with the same name. Errors during execution include a\r\n   * single location, the field which produced the error.\r\n   *\r\n   * Enumerable, and appears in the result of JSON.stringify().\r\n   */\n\n  /**\r\n   * An array describing the JSON-path into the execution response which\r\n   * corresponds to this error. Only included for errors during execution.\r\n   *\r\n   * Enumerable, and appears in the result of JSON.stringify().\r\n   */\n\n  /**\r\n   * An array of GraphQL AST Nodes corresponding to this error.\r\n   */\n\n  /**\r\n   * The source GraphQL document for the first location of this error.\r\n   *\r\n   * Note that if this Error represents more than one node, the source may not\r\n   * represent nodes after the first node.\r\n   */\n\n  /**\r\n   * An array of character offsets within the source GraphQL document\r\n   * which correspond to this error.\r\n   */\n\n  /**\r\n   * The original error thrown from a field resolver during execution.\r\n   */\n\n  /**\r\n   * Extension fields to add to the formatted error.\r\n   */\n  constructor(message, nodes, source, positions, path, originalError, extensions) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError = originalError !== null && originalError !== void 0 ? originalError : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined);\n    const nodeLocations = undefinedIfEmpty((_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map(node => node.loc).filter(loc => loc != null)); // Compute locations in the source for the given nodes/positions.\n\n    this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;\n    this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(loc => loc.start);\n    this.locations = positions && source ? positions.map(pos => getLocation(source, pos)) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(loc => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(originalError === null || originalError === void 0 ? void 0 : originalError.extensions) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : undefined;\n    this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true\n      },\n      name: {\n        enumerable: false\n      },\n      nodes: {\n        enumerable: false\n      },\n      source: {\n        enumerable: false\n      },\n      positions: {\n        enumerable: false\n      },\n      originalError: {\n        enumerable: false\n      }\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (originalError !== null && originalError !== void 0 && originalError.stack) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true\n      });\n    }\n    /* c8 ignore stop */\n\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\r\n * See: https://spec.graphql.org/draft/#sec-Errors\r\n */\n\n/**\r\n * Prints a GraphQLError to a string, representing useful location information\r\n * about the error's position in the source.\r\n *\r\n * @deprecated Please use `error.toString` instead. Will be removed in v17\r\n */\n\n\nexport function printError(error) {\n  return error.toString();\n}\n/**\r\n * Given a GraphQLError, format it according to the rules described by the\r\n * Response Format, Errors section of the GraphQL Specification.\r\n *\r\n * @deprecated Please use `error.toString` instead. Will be removed in v17\r\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/error/GraphQLError.mjs"],"names":["isObjectLike","getLocation","printLocation","printSourceLocation","GraphQLError","Error","constructor","message","nodes","source","positions","path","originalError","extensions","_this$nodes","_nodeLocations$","_ref","name","undefined","undefinedIfEmpty","Array","isArray","nodeLocations","map","node","loc","filter","start","locations","pos","originalExtensions","Object","create","defineProperties","writable","enumerable","stack","defineProperty","value","configurable","captureStackTrace","Symbol","toStringTag","toString","output","location","toJSON","formattedError","keys","length","array","printError","error","formatError"],"mappings":"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","sourcesContent":["import { isObjectLike } from '../jsutils/isObjectLike.mjs';\r\nimport { getLocation } from '../language/location.mjs';\r\nimport {\r\n  printLocation,\r\n  printSourceLocation,\r\n} from '../language/printLocation.mjs';\r\n/**\r\n * Custom extensions\r\n *\r\n * @remarks\r\n * Use a unique identifier name for your extension, for example the name of\r\n * your library or project. Do not use a shortened identifier as this increases\r\n * the risk of conflicts. We recommend you add at most one extension field,\r\n * an object which can contain all the values you need.\r\n */\r\n\r\n/**\r\n * A GraphQLError describes an Error found during the parse, validate, or\r\n * execute phases of performing a GraphQL operation. In addition to a message\r\n * and stack trace, it also includes information about the locations in a\r\n * GraphQL document and/or execution result that correspond to the Error.\r\n */\r\nexport class GraphQLError extends Error {\r\n  /**\r\n   * An array of `{ line, column }` locations within the source GraphQL document\r\n   * which correspond to this error.\r\n   *\r\n   * Errors during validation often contain multiple locations, for example to\r\n   * point out two things with the same name. Errors during execution include a\r\n   * single location, the field which produced the error.\r\n   *\r\n   * Enumerable, and appears in the result of JSON.stringify().\r\n   */\r\n\r\n  /**\r\n   * An array describing the JSON-path into the execution response which\r\n   * corresponds to this error. Only included for errors during execution.\r\n   *\r\n   * Enumerable, and appears in the result of JSON.stringify().\r\n   */\r\n\r\n  /**\r\n   * An array of GraphQL AST Nodes corresponding to this error.\r\n   */\r\n\r\n  /**\r\n   * The source GraphQL document for the first location of this error.\r\n   *\r\n   * Note that if this Error represents more than one node, the source may not\r\n   * represent nodes after the first node.\r\n   */\r\n\r\n  /**\r\n   * An array of character offsets within the source GraphQL document\r\n   * which correspond to this error.\r\n   */\r\n\r\n  /**\r\n   * The original error thrown from a field resolver during execution.\r\n   */\r\n\r\n  /**\r\n   * Extension fields to add to the formatted error.\r\n   */\r\n  constructor(\r\n    message,\r\n    nodes,\r\n    source,\r\n    positions,\r\n    path,\r\n    originalError,\r\n    extensions,\r\n  ) {\r\n    var _this$nodes, _nodeLocations$, _ref;\r\n\r\n    super(message);\r\n    this.name = 'GraphQLError';\r\n    this.path = path !== null && path !== void 0 ? path : undefined;\r\n    this.originalError =\r\n      originalError !== null && originalError !== void 0\r\n        ? originalError\r\n        : undefined; // Compute list of blame nodes.\r\n\r\n    this.nodes = undefinedIfEmpty(\r\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\r\n    );\r\n    const nodeLocations = undefinedIfEmpty(\r\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\r\n        ? void 0\r\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\r\n    ); // Compute locations in the source for the given nodes/positions.\r\n\r\n    this.source =\r\n      source !== null && source !== void 0\r\n        ? source\r\n        : nodeLocations === null || nodeLocations === void 0\r\n        ? void 0\r\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\r\n          _nodeLocations$ === void 0\r\n        ? void 0\r\n        : _nodeLocations$.source;\r\n    this.positions =\r\n      positions !== null && positions !== void 0\r\n        ? positions\r\n        : nodeLocations === null || nodeLocations === void 0\r\n        ? void 0\r\n        : nodeLocations.map((loc) => loc.start);\r\n    this.locations =\r\n      positions && source\r\n        ? positions.map((pos) => getLocation(source, pos))\r\n        : nodeLocations === null || nodeLocations === void 0\r\n        ? void 0\r\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\r\n    const originalExtensions = isObjectLike(\r\n      originalError === null || originalError === void 0\r\n        ? void 0\r\n        : originalError.extensions,\r\n    )\r\n      ? originalError === null || originalError === void 0\r\n        ? void 0\r\n        : originalError.extensions\r\n      : undefined;\r\n    this.extensions =\r\n      (_ref =\r\n        extensions !== null && extensions !== void 0\r\n          ? extensions\r\n          : originalExtensions) !== null && _ref !== void 0\r\n        ? _ref\r\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\r\n    // Keep the rest as non-enumerable.\r\n\r\n    Object.defineProperties(this, {\r\n      message: {\r\n        writable: true,\r\n        enumerable: true,\r\n      },\r\n      name: {\r\n        enumerable: false,\r\n      },\r\n      nodes: {\r\n        enumerable: false,\r\n      },\r\n      source: {\r\n        enumerable: false,\r\n      },\r\n      positions: {\r\n        enumerable: false,\r\n      },\r\n      originalError: {\r\n        enumerable: false,\r\n      },\r\n    }); // Include (non-enumerable) stack trace.\r\n\r\n    /* c8 ignore start */\r\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\r\n\r\n    if (\r\n      originalError !== null &&\r\n      originalError !== void 0 &&\r\n      originalError.stack\r\n    ) {\r\n      Object.defineProperty(this, 'stack', {\r\n        value: originalError.stack,\r\n        writable: true,\r\n        configurable: true,\r\n      });\r\n    } else if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, GraphQLError);\r\n    } else {\r\n      Object.defineProperty(this, 'stack', {\r\n        value: Error().stack,\r\n        writable: true,\r\n        configurable: true,\r\n      });\r\n    }\r\n    /* c8 ignore stop */\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return 'GraphQLError';\r\n  }\r\n\r\n  toString() {\r\n    let output = this.message;\r\n\r\n    if (this.nodes) {\r\n      for (const node of this.nodes) {\r\n        if (node.loc) {\r\n          output += '\\n\\n' + printLocation(node.loc);\r\n        }\r\n      }\r\n    } else if (this.source && this.locations) {\r\n      for (const location of this.locations) {\r\n        output += '\\n\\n' + printSourceLocation(this.source, location);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  toJSON() {\r\n    const formattedError = {\r\n      message: this.message,\r\n    };\r\n\r\n    if (this.locations != null) {\r\n      formattedError.locations = this.locations;\r\n    }\r\n\r\n    if (this.path != null) {\r\n      formattedError.path = this.path;\r\n    }\r\n\r\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\r\n      formattedError.extensions = this.extensions;\r\n    }\r\n\r\n    return formattedError;\r\n  }\r\n}\r\n\r\nfunction undefinedIfEmpty(array) {\r\n  return array === undefined || array.length === 0 ? undefined : array;\r\n}\r\n/**\r\n * See: https://spec.graphql.org/draft/#sec-Errors\r\n */\r\n\r\n/**\r\n * Prints a GraphQLError to a string, representing useful location information\r\n * about the error's position in the source.\r\n *\r\n * @deprecated Please use `error.toString` instead. Will be removed in v17\r\n */\r\nexport function printError(error) {\r\n  return error.toString();\r\n}\r\n/**\r\n * Given a GraphQLError, format it according to the rules described by the\r\n * Response Format, Errors section of the GraphQL Specification.\r\n *\r\n * @deprecated Please use `error.toString` instead. Will be removed in v17\r\n */\r\n\r\nexport function formatError(error) {\r\n  return error.toJSON();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}