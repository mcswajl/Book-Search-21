{"ast":null,"code":"import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\nimport { GraphQLDirective } from '../type/directives.mjs';\nimport { isIntrospectionType } from '../type/introspection.mjs';\nimport { GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, isListType, isNonNullType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from '../type/definition.mjs';\n/**\r\n * Sort GraphQLSchema.\r\n *\r\n * This function returns a sorted copy of the given GraphQLSchema.\r\n */\n\nexport function lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = keyValMap(sortByName(schemaConfig.types), type => type.name, sortNamedType);\n  return new GraphQLSchema({ ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription)\n  });\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({ ...config,\n      locations: sortBy(config.locations, x => x),\n      args: sortArgs(config.args)\n    });\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, arg => ({ ...arg,\n      type: replaceType(arg.type)\n    }));\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, field => ({ ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args)\n    }));\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, field => ({ ...field,\n      type: replaceType(field.type)\n    }));\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    if (isObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLObjectType({ ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields)\n      });\n    }\n\n    if (isInterfaceType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInterfaceType({ ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields)\n      });\n    }\n\n    if (isUnionType(type)) {\n      const config = type.toConfig();\n      return new GraphQLUnionType({ ...config,\n        types: () => sortTypes(config.types)\n      });\n    }\n\n    if (isEnumType(type)) {\n      const config = type.toConfig();\n      return new GraphQLEnumType({ ...config,\n        values: sortObjMap(config.values, value => value)\n      });\n    }\n\n    if (isInputObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInputObjectType({ ...config,\n        fields: () => sortInputFields(config.fields)\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n\n  for (const key of Object.keys(map).sort(naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, obj => obj.name);\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/utilities/lexicographicSortSchema.mjs"],"names":["inspect","invariant","keyValMap","naturalCompare","GraphQLSchema","GraphQLDirective","isIntrospectionType","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","isListType","isNonNullType","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","lexicographicSortSchema","schema","schemaConfig","toConfig","typeMap","sortByName","types","type","name","sortNamedType","Object","values","directives","map","sortDirective","query","replaceMaybeType","mutation","subscription","replaceType","ofType","replaceNamedType","maybeType","directive","config","locations","sortBy","x","args","sortArgs","sortObjMap","arg","sortFields","fieldsMap","field","sortInputFields","sortTypes","array","interfaces","fields","value","sortValueFn","sortedMap","create","key","keys","sort","obj","mapToKey","slice","obj1","obj2","key1","key2"],"mappings":"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","sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\r\nimport { invariant } from '../jsutils/invariant.mjs';\r\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\r\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\r\nimport { GraphQLSchema } from '../type/schema.mjs';\r\nimport { GraphQLDirective } from '../type/directives.mjs';\r\nimport { isIntrospectionType } from '../type/introspection.mjs';\r\nimport {\r\n  GraphQLList,\r\n  GraphQLNonNull,\r\n  GraphQLObjectType,\r\n  GraphQLInterfaceType,\r\n  GraphQLUnionType,\r\n  GraphQLEnumType,\r\n  GraphQLInputObjectType,\r\n  isListType,\r\n  isNonNullType,\r\n  isScalarType,\r\n  isObjectType,\r\n  isInterfaceType,\r\n  isUnionType,\r\n  isEnumType,\r\n  isInputObjectType,\r\n} from '../type/definition.mjs';\r\n/**\r\n * Sort GraphQLSchema.\r\n *\r\n * This function returns a sorted copy of the given GraphQLSchema.\r\n */\r\n\r\nexport function lexicographicSortSchema(schema) {\r\n  const schemaConfig = schema.toConfig();\r\n  const typeMap = keyValMap(\r\n    sortByName(schemaConfig.types),\r\n    (type) => type.name,\r\n    sortNamedType,\r\n  );\r\n  return new GraphQLSchema({\r\n    ...schemaConfig,\r\n    types: Object.values(typeMap),\r\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\r\n    query: replaceMaybeType(schemaConfig.query),\r\n    mutation: replaceMaybeType(schemaConfig.mutation),\r\n    subscription: replaceMaybeType(schemaConfig.subscription),\r\n  });\r\n\r\n  function replaceType(type) {\r\n    if (isListType(type)) {\r\n      // @ts-expect-error\r\n      return new GraphQLList(replaceType(type.ofType));\r\n    } else if (isNonNullType(type)) {\r\n      // @ts-expect-error\r\n      return new GraphQLNonNull(replaceType(type.ofType));\r\n    } // @ts-expect-error FIXME: TS Conversion\r\n\r\n    return replaceNamedType(type);\r\n  }\r\n\r\n  function replaceNamedType(type) {\r\n    return typeMap[type.name];\r\n  }\r\n\r\n  function replaceMaybeType(maybeType) {\r\n    return maybeType && replaceNamedType(maybeType);\r\n  }\r\n\r\n  function sortDirective(directive) {\r\n    const config = directive.toConfig();\r\n    return new GraphQLDirective({\r\n      ...config,\r\n      locations: sortBy(config.locations, (x) => x),\r\n      args: sortArgs(config.args),\r\n    });\r\n  }\r\n\r\n  function sortArgs(args) {\r\n    return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));\r\n  }\r\n\r\n  function sortFields(fieldsMap) {\r\n    return sortObjMap(fieldsMap, (field) => ({\r\n      ...field,\r\n      type: replaceType(field.type),\r\n      args: field.args && sortArgs(field.args),\r\n    }));\r\n  }\r\n\r\n  function sortInputFields(fieldsMap) {\r\n    return sortObjMap(fieldsMap, (field) => ({\r\n      ...field,\r\n      type: replaceType(field.type),\r\n    }));\r\n  }\r\n\r\n  function sortTypes(array) {\r\n    return sortByName(array).map(replaceNamedType);\r\n  }\r\n\r\n  function sortNamedType(type) {\r\n    if (isScalarType(type) || isIntrospectionType(type)) {\r\n      return type;\r\n    }\r\n\r\n    if (isObjectType(type)) {\r\n      const config = type.toConfig();\r\n      return new GraphQLObjectType({\r\n        ...config,\r\n        interfaces: () => sortTypes(config.interfaces),\r\n        fields: () => sortFields(config.fields),\r\n      });\r\n    }\r\n\r\n    if (isInterfaceType(type)) {\r\n      const config = type.toConfig();\r\n      return new GraphQLInterfaceType({\r\n        ...config,\r\n        interfaces: () => sortTypes(config.interfaces),\r\n        fields: () => sortFields(config.fields),\r\n      });\r\n    }\r\n\r\n    if (isUnionType(type)) {\r\n      const config = type.toConfig();\r\n      return new GraphQLUnionType({\r\n        ...config,\r\n        types: () => sortTypes(config.types),\r\n      });\r\n    }\r\n\r\n    if (isEnumType(type)) {\r\n      const config = type.toConfig();\r\n      return new GraphQLEnumType({\r\n        ...config,\r\n        values: sortObjMap(config.values, (value) => value),\r\n      });\r\n    }\r\n\r\n    if (isInputObjectType(type)) {\r\n      const config = type.toConfig();\r\n      return new GraphQLInputObjectType({\r\n        ...config,\r\n        fields: () => sortInputFields(config.fields),\r\n      });\r\n    }\r\n    /* c8 ignore next 3 */\r\n    // Not reachable, all possible types have been considered.\r\n\r\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\r\n  }\r\n}\r\n\r\nfunction sortObjMap(map, sortValueFn) {\r\n  const sortedMap = Object.create(null);\r\n\r\n  for (const key of Object.keys(map).sort(naturalCompare)) {\r\n    sortedMap[key] = sortValueFn(map[key]);\r\n  }\r\n\r\n  return sortedMap;\r\n}\r\n\r\nfunction sortByName(array) {\r\n  return sortBy(array, (obj) => obj.name);\r\n}\r\n\r\nfunction sortBy(array, mapToKey) {\r\n  return array.slice().sort((obj1, obj2) => {\r\n    const key1 = mapToKey(obj1);\r\n    const key2 = mapToKey(obj2);\r\n    return naturalCompare(key1, key2);\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}