{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\r\n * No undefined variables\r\n *\r\n * A GraphQL operation is only valid if all variables encountered, both directly\r\n * and via fragment spreads, are defined by that operation.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\r\n */\n\nexport function NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const {\n          node\n        } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(new GraphQLError(operation.name ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".` : `Variable \"$${varName}\" is not defined.`, [node, operation]));\n          }\n        }\n      }\n\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs"],"names":["GraphQLError","NoUndefinedVariablesRule","context","variableNameDefined","Object","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","node","varName","name","value","reportError","VariableDefinition","variable"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;;;;;;;;;AAQA,OAAO,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;AAChD,MAAIC,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA1B;AACA,SAAO;AACLC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,KAAK,GAAG;AACNJ,QAAAA,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB;AACD,OAHkB;;AAKnBG,MAAAA,KAAK,CAACC,SAAD,EAAY;AACf,cAAMC,MAAM,GAAGR,OAAO,CAACS,0BAAR,CAAmCF,SAAnC,CAAf;;AAEA,aAAK,MAAM;AAAEG,UAAAA;AAAF,SAAX,IAAuBF,MAAvB,EAA+B;AAC7B,gBAAMG,OAAO,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAA1B;;AAEA,cAAIZ,mBAAmB,CAACU,OAAD,CAAnB,KAAiC,IAArC,EAA2C;AACzCX,YAAAA,OAAO,CAACc,WAAR,CACE,IAAIhB,YAAJ,CACES,SAAS,CAACK,IAAV,GACK,cAAaD,OAAQ,kCAAiCJ,SAAS,CAACK,IAAV,CAAeC,KAAM,IADhF,GAEK,cAAaF,OAAQ,mBAH5B,EAIE,CAACD,IAAD,EAAOH,SAAP,CAJF,CADF;AAQD;AACF;AACF;;AAtBkB,KADhB;;AA0BLQ,IAAAA,kBAAkB,CAACL,IAAD,EAAO;AACvBT,MAAAA,mBAAmB,CAACS,IAAI,CAACM,QAAL,CAAcJ,IAAd,CAAmBC,KAApB,CAAnB,GAAgD,IAAhD;AACD;;AA5BI,GAAP;AA8BD","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\r\n\r\n/**\r\n * No undefined variables\r\n *\r\n * A GraphQL operation is only valid if all variables encountered, both directly\r\n * and via fragment spreads, are defined by that operation.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\r\n */\r\nexport function NoUndefinedVariablesRule(context) {\r\n  let variableNameDefined = Object.create(null);\r\n  return {\r\n    OperationDefinition: {\r\n      enter() {\r\n        variableNameDefined = Object.create(null);\r\n      },\r\n\r\n      leave(operation) {\r\n        const usages = context.getRecursiveVariableUsages(operation);\r\n\r\n        for (const { node } of usages) {\r\n          const varName = node.name.value;\r\n\r\n          if (variableNameDefined[varName] !== true) {\r\n            context.reportError(\r\n              new GraphQLError(\r\n                operation.name\r\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\r\n                  : `Variable \"$${varName}\" is not defined.`,\r\n                [node, operation],\r\n              ),\r\n            );\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n    VariableDefinition(node) {\r\n      variableNameDefined[node.variable.name.value] = true;\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}