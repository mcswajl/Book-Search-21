{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isObjectType, isInterfaceType, isInputObjectType } from '../../type/definition.mjs';\n/**\r\n * Unique field definition names\r\n *\r\n * A GraphQL complex type is only valid if all its fields are uniquely named.\r\n */\n\nexport function UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    const typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n\n    const fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n    const fieldNames = knownFieldNames[typeName];\n\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(new GraphQLError(`Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`, fieldDef.name));\n      } else if (fieldNames[fieldName]) {\n        context.reportError(new GraphQLError(`Field \"${typeName}.${fieldName}\" can only be defined once.`, [fieldNames[fieldName], fieldDef.name]));\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs"],"names":["GraphQLError","isObjectType","isInterfaceType","isInputObjectType","UniqueFieldDefinitionNamesRule","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownFieldNames","InputObjectTypeDefinition","checkFieldUniqueness","InputObjectTypeExtension","InterfaceTypeDefinition","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","node","_node$fields","typeName","name","value","fieldNodes","fields","fieldNames","fieldDef","fieldName","hasField","reportError","type","getFields"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SACEC,YADF,EAEEC,eAFF,EAGEC,iBAHF,QAIO,2BAJP;AAMA;;;;;;AAKA,OAAO,SAASC,8BAAT,CAAwCC,OAAxC,EAAiD;AACtD,QAAMC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAf;AACA,QAAMC,eAAe,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAP,EAAH,GAAyBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvD;AACA,QAAMC,eAAe,GAAGF,MAAM,CAACC,MAAP,CAAc,IAAd,CAAxB;AACA,SAAO;AACLE,IAAAA,yBAAyB,EAAEC,oBADtB;AAELC,IAAAA,wBAAwB,EAAED,oBAFrB;AAGLE,IAAAA,uBAAuB,EAAEF,oBAHpB;AAILG,IAAAA,sBAAsB,EAAEH,oBAJnB;AAKLI,IAAAA,oBAAoB,EAAEJ,oBALjB;AAMLK,IAAAA,mBAAmB,EAAEL;AANhB,GAAP;;AASA,WAASA,oBAAT,CAA8BM,IAA9B,EAAoC;AAClC,QAAIC,YAAJ;;AAEA,UAAMC,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUC,KAA3B;;AAEA,QAAI,CAACZ,eAAe,CAACU,QAAD,CAApB,EAAgC;AAC9BV,MAAAA,eAAe,CAACU,QAAD,CAAf,GAA4BZ,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B;AACD,KAPiC,CAOhC;;AAEF;;;AAEA,UAAMc,UAAU,GACd,CAACJ,YAAY,GAAGD,IAAI,CAACM,MAArB,MAAiC,IAAjC,IAAyCL,YAAY,KAAK,KAAK,CAA/D,GACIA,YADJ,GAEI,EAHN;AAIA,UAAMM,UAAU,GAAGf,eAAe,CAACU,QAAD,CAAlC;;AAEA,SAAK,MAAMM,QAAX,IAAuBH,UAAvB,EAAmC;AACjC,YAAMI,SAAS,GAAGD,QAAQ,CAACL,IAAT,CAAcC,KAAhC;;AAEA,UAAIM,QAAQ,CAACtB,eAAe,CAACc,QAAD,CAAhB,EAA4BO,SAA5B,CAAZ,EAAoD;AAClDxB,QAAAA,OAAO,CAAC0B,WAAR,CACE,IAAI/B,YAAJ,CACG,UAASsB,QAAS,IAAGO,SAAU,mFADlC,EAEED,QAAQ,CAACL,IAFX,CADF;AAMD,OAPD,MAOO,IAAII,UAAU,CAACE,SAAD,CAAd,EAA2B;AAChCxB,QAAAA,OAAO,CAAC0B,WAAR,CACE,IAAI/B,YAAJ,CACG,UAASsB,QAAS,IAAGO,SAAU,6BADlC,EAEE,CAACF,UAAU,CAACE,SAAD,CAAX,EAAwBD,QAAQ,CAACL,IAAjC,CAFF,CADF;AAMD,OAPM,MAOA;AACLI,QAAAA,UAAU,CAACE,SAAD,CAAV,GAAwBD,QAAQ,CAACL,IAAjC;AACD;AACF;;AAED,WAAO,KAAP;AACD;AACF;;AAED,SAASO,QAAT,CAAkBE,IAAlB,EAAwBH,SAAxB,EAAmC;AACjC,MAAI5B,YAAY,CAAC+B,IAAD,CAAZ,IAAsB9B,eAAe,CAAC8B,IAAD,CAArC,IAA+C7B,iBAAiB,CAAC6B,IAAD,CAApE,EAA4E;AAC1E,WAAOA,IAAI,CAACC,SAAL,GAAiBJ,SAAjB,KAA+B,IAAtC;AACD;;AAED,SAAO,KAAP;AACD","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\r\nimport {\r\n  isObjectType,\r\n  isInterfaceType,\r\n  isInputObjectType,\r\n} from '../../type/definition.mjs';\r\n\r\n/**\r\n * Unique field definition names\r\n *\r\n * A GraphQL complex type is only valid if all its fields are uniquely named.\r\n */\r\nexport function UniqueFieldDefinitionNamesRule(context) {\r\n  const schema = context.getSchema();\r\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\r\n  const knownFieldNames = Object.create(null);\r\n  return {\r\n    InputObjectTypeDefinition: checkFieldUniqueness,\r\n    InputObjectTypeExtension: checkFieldUniqueness,\r\n    InterfaceTypeDefinition: checkFieldUniqueness,\r\n    InterfaceTypeExtension: checkFieldUniqueness,\r\n    ObjectTypeDefinition: checkFieldUniqueness,\r\n    ObjectTypeExtension: checkFieldUniqueness,\r\n  };\r\n\r\n  function checkFieldUniqueness(node) {\r\n    var _node$fields;\r\n\r\n    const typeName = node.name.value;\r\n\r\n    if (!knownFieldNames[typeName]) {\r\n      knownFieldNames[typeName] = Object.create(null);\r\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\r\n\r\n    /* c8 ignore next */\r\n\r\n    const fieldNodes =\r\n      (_node$fields = node.fields) !== null && _node$fields !== void 0\r\n        ? _node$fields\r\n        : [];\r\n    const fieldNames = knownFieldNames[typeName];\r\n\r\n    for (const fieldDef of fieldNodes) {\r\n      const fieldName = fieldDef.name.value;\r\n\r\n      if (hasField(existingTypeMap[typeName], fieldName)) {\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`,\r\n            fieldDef.name,\r\n          ),\r\n        );\r\n      } else if (fieldNames[fieldName]) {\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Field \"${typeName}.${fieldName}\" can only be defined once.`,\r\n            [fieldNames[fieldName], fieldDef.name],\r\n          ),\r\n        );\r\n      } else {\r\n        fieldNames[fieldName] = fieldDef.name;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction hasField(type, fieldName) {\r\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\r\n    return type.getFields()[fieldName] != null;\r\n  }\r\n\r\n  return false;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}