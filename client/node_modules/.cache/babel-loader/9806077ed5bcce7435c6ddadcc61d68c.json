{"ast":null,"code":"import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { getNamedType, isNonNullType, isLeafType, isObjectType, isListType, isInterfaceType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(([responseName, subReason]) => `subfields \"${responseName}\" conflict because ` + reasonMessage(subReason)).join(' and ');\n  }\n\n  return reason;\n}\n/**\r\n * Overlapping fields can be merged\r\n *\r\n * A selection set is only valid if all fields (including spreading any\r\n * fragments) either correspond to distinct response names or can be merged\r\n * without ambiguity.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging\r\n */\n\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  const comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  const cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet(selectionSet) {\n      const conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);\n\n      for (const [[responseName, reason], fields1, fields2] of conflicts) {\n        const reasonMsg = reasonMessage(reason);\n        context.reportError(new GraphQLError(`Fields \"${responseName}\" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`, fields1.concat(fields2)));\n      }\n    }\n\n  };\n}\n/**\r\n * Algorithm:\r\n *\r\n * Conflicts occur when two fields exist in a query which will produce the same\r\n * response name, but represent differing values, thus creating a conflict.\r\n * The algorithm below finds all conflicts via making a series of comparisons\r\n * between fields. In order to compare as few fields as possible, this makes\r\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\r\n *\r\n * Given any selection set, a collection produces both a set of fields by\r\n * also including all inline fragments, as well as a list of fragments\r\n * referenced by fragment spreads.\r\n *\r\n * A) Each selection set represented in the document first compares \"within\" its\r\n * collected set of fields, finding any conflicts between every pair of\r\n * overlapping fields.\r\n * Note: This is the *only time* that a the fields \"within\" a set are compared\r\n * to each other. After this only fields \"between\" sets are compared.\r\n *\r\n * B) Also, if any fragment is referenced in a selection set, then a\r\n * comparison is made \"between\" the original set of fields and the\r\n * referenced fragment.\r\n *\r\n * C) Also, if multiple fragments are referenced, then comparisons\r\n * are made \"between\" each referenced fragment.\r\n *\r\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\r\n * a comparison is made between each field in the original set of fields and\r\n * each field in the the referenced set of fields.\r\n *\r\n * E) Also, if any fragment is referenced in the referenced selection set,\r\n * then a comparison is made \"between\" the original set of fields and the\r\n * referenced fragment (recursively referring to step D).\r\n *\r\n * F) When comparing \"between\" two fragments, first a comparison is made between\r\n * each field in the first referenced set of fields and each field in the the\r\n * second referenced set of fields.\r\n *\r\n * G) Also, any fragments referenced by the first must be compared to the\r\n * second, and any fragments referenced by the second must be compared to the\r\n * first (recursively referring to step F).\r\n *\r\n * H) When comparing two fields, if both have selection sets, then a comparison\r\n * is made \"between\" both selection sets, first comparing the set of fields in\r\n * the first selection set with the set of fields in the second.\r\n *\r\n * I) Also, if any fragment is referenced in either selection set, then a\r\n * comparison is made \"between\" the other set of fields and the\r\n * referenced fragment.\r\n *\r\n * J) Also, if two fragments are referenced in both selection sets, then a\r\n * comparison is made \"between\" the two fragments.\r\n *\r\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\n\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {\n  const conflicts = [];\n  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet); // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (let i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (let j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\n\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {\n  const fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  const [fieldMap2, referencedFragmentNames] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment); // Do not compare a fragment's fieldMap to itself.\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (const referencedFragmentName of referencedFragmentNames) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, referencedFragmentName);\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\n\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n\n  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  const fragment1 = context.getFragment(fragmentName1);\n  const fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  const [fieldMap1, referencedFragmentNames1] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1);\n  const [fieldMap2, referencedFragmentNames2] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2); // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (const referencedFragmentName2 of referencedFragmentNames2) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, referencedFragmentName2);\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n\n  for (const referencedFragmentName1 of referencedFragmentNames1) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, referencedFragmentName1, fragmentName2);\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\n\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  const conflicts = [];\n  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1);\n  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2); // (H) First, collect all conflicts between these two collections of field.\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  for (const fragmentName2 of fragmentNames2) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentName2);\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n\n  for (const fragmentName1 of fragmentNames1) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentName1);\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n\n  for (const fragmentName1 of fragmentNames1) {\n    for (const fragmentName2 of fragmentNames2) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2);\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\n\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (const [responseName, fields] of Object.entries(fieldMap)) {\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (let i = 0; i < fields.length; i++) {\n        for (let j = i + 1; j < fields.length; j++) {\n          const conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\n\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (const [responseName, fields1] of Object.entries(fieldMap1)) {\n    const fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      for (const field1 of fields1) {\n        for (const field2 of fields2) {\n          const conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\n\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  const [parentType1, node1, def1] = field1;\n  const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  const areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2);\n\n  if (!areMutuallyExclusive) {\n    var _node1$arguments, _node2$arguments; // Two aliases must refer to the same field.\n\n\n    const name1 = node1.name.value;\n    const name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [[responseName, `\"${name1}\" and \"${name2}\" are different fields`], [node1], [node2]];\n    } // FIXME https://github.com/graphql/graphql-js/issues/2203\n\n\n    const args1 =\n    /* c8 ignore next */\n    (_node1$arguments = node1.arguments) !== null && _node1$arguments !== void 0 ? _node1$arguments : [];\n    const args2 =\n    /* c8 ignore next */\n    (_node2$arguments = node2.arguments) !== null && _node2$arguments !== void 0 ? _node2$arguments : []; // Two field calls must have the same arguments.\n\n    if (!sameArguments(args1, args2)) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  } // The return type for each field.\n\n\n  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, `they return conflicting types \"${inspect(type1)}\" and \"${inspect(type2)}\"`], [node1], [node2]];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n\n  const selectionSet1 = node1.selectionSet;\n  const selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    const conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n\n  return arguments1.every(argument1 => {\n    const argument2 = arguments2.find(argument => argument.name.value === argument1.name.value);\n\n    if (!argument2) {\n      return false;\n    }\n\n    return sameValue(argument1.value, argument2.value);\n  });\n}\n\nfunction sameValue(value1, value2) {\n  return print(value1) === print(value2);\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\n\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  const cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const nodeAndDefs = Object.create(null);\n  const fragmentNames = Object.create(null);\n\n  _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n\n  const result = [nodeAndDefs, Object.keys(fragmentNames)];\n  cachedFieldsAndFragmentNames.set(selectionSet, result);\n  return result;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\n\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\n\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          const fieldName = selection.name.value;\n          let fieldDef;\n\n          if (isObjectType(parentType) || isInterfaceType(parentType)) {\n            fieldDef = parentType.getFields()[fieldName];\n          }\n\n          const responseName = selection.alias ? selection.alias.value : fieldName;\n\n          if (!nodeAndDefs[responseName]) {\n            nodeAndDefs[responseName] = [];\n          }\n\n          nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          const typeCondition = selection.typeCondition;\n          const inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;\n\n          _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n\n          break;\n        }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(([reason]) => reason)], [node1, ...conflicts.map(([, fields1]) => fields1).flat()], [node2, ...conflicts.map(([,, fields2]) => fields2).flat()]];\n  }\n}\n/**\r\n * A way to keep track of pairs of things when the ordering of the pair does not matter.\r\n */\n\n\nclass PairSet {\n  constructor() {\n    this._data = new Map();\n  }\n\n  has(a, b, areMutuallyExclusive) {\n    var _this$_data$get;\n\n    const [key1, key2] = a < b ? [a, b] : [b, a];\n    const result = (_this$_data$get = this._data.get(key1)) === null || _this$_data$get === void 0 ? void 0 : _this$_data$get.get(key2);\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true, hence if\n    // we want to know if this PairSet \"has\" these two with no exclusivity,\n    // we have to ensure it was added as such.\n\n\n    return areMutuallyExclusive ? true : areMutuallyExclusive === result;\n  }\n\n  add(a, b, areMutuallyExclusive) {\n    const [key1, key2] = a < b ? [a, b] : [b, a];\n\n    const map = this._data.get(key1);\n\n    if (map === undefined) {\n      this._data.set(key1, new Map([[key2, areMutuallyExclusive]]));\n    } else {\n      map.set(key2, areMutuallyExclusive);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs"],"names":["inspect","GraphQLError","Kind","print","getNamedType","isNonNullType","isLeafType","isObjectType","isListType","isInterfaceType","typeFromAST","reasonMessage","reason","Array","isArray","map","responseName","subReason","join","OverlappingFieldsCanBeMergedRule","context","comparedFragmentPairs","PairSet","cachedFieldsAndFragmentNames","Map","SelectionSet","selectionSet","conflicts","findConflictsWithinSelectionSet","getParentType","fields1","fields2","reasonMsg","reportError","concat","parentType","fieldMap","fragmentNames","getFieldsAndFragmentNames","collectConflictsWithin","length","i","collectConflictsBetweenFieldsAndFragment","j","collectConflictsBetweenFragments","areMutuallyExclusive","fragmentName","fragment","getFragment","fieldMap2","referencedFragmentNames","getReferencedFieldsAndFragmentNames","collectConflictsBetween","referencedFragmentName","fragmentName1","fragmentName2","has","add","fragment1","fragment2","fieldMap1","referencedFragmentNames1","referencedFragmentNames2","referencedFragmentName2","referencedFragmentName1","findConflictsBetweenSubSelectionSets","parentType1","selectionSet1","parentType2","selectionSet2","fragmentNames1","fragmentNames2","fields","Object","entries","conflict","findConflict","push","parentFieldsAreMutuallyExclusive","field1","field2","node1","def1","node2","def2","_node1$arguments","_node2$arguments","name1","name","value","name2","args1","arguments","args2","sameArguments","type1","type","type2","doTypesConflict","subfieldConflicts","arguments1","arguments2","every","argument1","argument2","find","argument","sameValue","value1","value2","ofType","cached","get","nodeAndDefs","create","_collectFieldsAndFragmentNames","result","keys","set","fragmentType","getSchema","typeCondition","selection","selections","kind","FIELD","fieldName","fieldDef","getFields","alias","FRAGMENT_SPREAD","INLINE_FRAGMENT","inlineFragmentType","flat","constructor","_data","a","b","_this$_data$get","key1","key2","undefined"],"mappings":"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","sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\r\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\r\nimport { Kind } from '../../language/kinds.mjs';\r\nimport { print } from '../../language/printer.mjs';\r\nimport {\r\n  getNamedType,\r\n  isNonNullType,\r\n  isLeafType,\r\n  isObjectType,\r\n  isListType,\r\n  isInterfaceType,\r\n} from '../../type/definition.mjs';\r\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\r\n\r\nfunction reasonMessage(reason) {\r\n  if (Array.isArray(reason)) {\r\n    return reason\r\n      .map(\r\n        ([responseName, subReason]) =>\r\n          `subfields \"${responseName}\" conflict because ` +\r\n          reasonMessage(subReason),\r\n      )\r\n      .join(' and ');\r\n  }\r\n\r\n  return reason;\r\n}\r\n/**\r\n * Overlapping fields can be merged\r\n *\r\n * A selection set is only valid if all fields (including spreading any\r\n * fragments) either correspond to distinct response names or can be merged\r\n * without ambiguity.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging\r\n */\r\n\r\nexport function OverlappingFieldsCanBeMergedRule(context) {\r\n  // A memoization for when two fragments are compared \"between\" each other for\r\n  // conflicts. Two fragments may be compared many times, so memoizing this can\r\n  // dramatically improve the performance of this validator.\r\n  const comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\r\n  // selection set. Selection sets may be asked for this information multiple\r\n  // times, so this improves the performance of this validator.\r\n\r\n  const cachedFieldsAndFragmentNames = new Map();\r\n  return {\r\n    SelectionSet(selectionSet) {\r\n      const conflicts = findConflictsWithinSelectionSet(\r\n        context,\r\n        cachedFieldsAndFragmentNames,\r\n        comparedFragmentPairs,\r\n        context.getParentType(),\r\n        selectionSet,\r\n      );\r\n\r\n      for (const [[responseName, reason], fields1, fields2] of conflicts) {\r\n        const reasonMsg = reasonMessage(reason);\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Fields \"${responseName}\" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,\r\n            fields1.concat(fields2),\r\n          ),\r\n        );\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Algorithm:\r\n *\r\n * Conflicts occur when two fields exist in a query which will produce the same\r\n * response name, but represent differing values, thus creating a conflict.\r\n * The algorithm below finds all conflicts via making a series of comparisons\r\n * between fields. In order to compare as few fields as possible, this makes\r\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\r\n *\r\n * Given any selection set, a collection produces both a set of fields by\r\n * also including all inline fragments, as well as a list of fragments\r\n * referenced by fragment spreads.\r\n *\r\n * A) Each selection set represented in the document first compares \"within\" its\r\n * collected set of fields, finding any conflicts between every pair of\r\n * overlapping fields.\r\n * Note: This is the *only time* that a the fields \"within\" a set are compared\r\n * to each other. After this only fields \"between\" sets are compared.\r\n *\r\n * B) Also, if any fragment is referenced in a selection set, then a\r\n * comparison is made \"between\" the original set of fields and the\r\n * referenced fragment.\r\n *\r\n * C) Also, if multiple fragments are referenced, then comparisons\r\n * are made \"between\" each referenced fragment.\r\n *\r\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\r\n * a comparison is made between each field in the original set of fields and\r\n * each field in the the referenced set of fields.\r\n *\r\n * E) Also, if any fragment is referenced in the referenced selection set,\r\n * then a comparison is made \"between\" the original set of fields and the\r\n * referenced fragment (recursively referring to step D).\r\n *\r\n * F) When comparing \"between\" two fragments, first a comparison is made between\r\n * each field in the first referenced set of fields and each field in the the\r\n * second referenced set of fields.\r\n *\r\n * G) Also, any fragments referenced by the first must be compared to the\r\n * second, and any fragments referenced by the second must be compared to the\r\n * first (recursively referring to step F).\r\n *\r\n * H) When comparing two fields, if both have selection sets, then a comparison\r\n * is made \"between\" both selection sets, first comparing the set of fields in\r\n * the first selection set with the set of fields in the second.\r\n *\r\n * I) Also, if any fragment is referenced in either selection set, then a\r\n * comparison is made \"between\" the other set of fields and the\r\n * referenced fragment.\r\n *\r\n * J) Also, if two fragments are referenced in both selection sets, then a\r\n * comparison is made \"between\" the two fragments.\r\n *\r\n */\r\n// Find all conflicts found \"within\" a selection set, including those found\r\n// via spreading in fragments. Called when visiting each SelectionSet in the\r\n// GraphQL Document.\r\nfunction findConflictsWithinSelectionSet(\r\n  context,\r\n  cachedFieldsAndFragmentNames,\r\n  comparedFragmentPairs,\r\n  parentType,\r\n  selectionSet,\r\n) {\r\n  const conflicts = [];\r\n  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(\r\n    context,\r\n    cachedFieldsAndFragmentNames,\r\n    parentType,\r\n    selectionSet,\r\n  ); // (A) Find find all conflicts \"within\" the fields of this selection set.\r\n  // Note: this is the *only place* `collectConflictsWithin` is called.\r\n\r\n  collectConflictsWithin(\r\n    context,\r\n    conflicts,\r\n    cachedFieldsAndFragmentNames,\r\n    comparedFragmentPairs,\r\n    fieldMap,\r\n  );\r\n\r\n  if (fragmentNames.length !== 0) {\r\n    // (B) Then collect conflicts between these fields and those represented by\r\n    // each spread fragment name found.\r\n    for (let i = 0; i < fragmentNames.length; i++) {\r\n      collectConflictsBetweenFieldsAndFragment(\r\n        context,\r\n        conflicts,\r\n        cachedFieldsAndFragmentNames,\r\n        comparedFragmentPairs,\r\n        false,\r\n        fieldMap,\r\n        fragmentNames[i],\r\n      ); // (C) Then compare this fragment with all other fragments found in this\r\n      // selection set to collect conflicts between fragments spread together.\r\n      // This compares each item in the list of fragment names to every other\r\n      // item in that same list (except for itself).\r\n\r\n      for (let j = i + 1; j < fragmentNames.length; j++) {\r\n        collectConflictsBetweenFragments(\r\n          context,\r\n          conflicts,\r\n          cachedFieldsAndFragmentNames,\r\n          comparedFragmentPairs,\r\n          false,\r\n          fragmentNames[i],\r\n          fragmentNames[j],\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  return conflicts;\r\n} // Collect all conflicts found between a set of fields and a fragment reference\r\n// including via spreading in any nested fragments.\r\n\r\nfunction collectConflictsBetweenFieldsAndFragment(\r\n  context,\r\n  conflicts,\r\n  cachedFieldsAndFragmentNames,\r\n  comparedFragmentPairs,\r\n  areMutuallyExclusive,\r\n  fieldMap,\r\n  fragmentName,\r\n) {\r\n  const fragment = context.getFragment(fragmentName);\r\n\r\n  if (!fragment) {\r\n    return;\r\n  }\r\n\r\n  const [fieldMap2, referencedFragmentNames] =\r\n    getReferencedFieldsAndFragmentNames(\r\n      context,\r\n      cachedFieldsAndFragmentNames,\r\n      fragment,\r\n    ); // Do not compare a fragment's fieldMap to itself.\r\n\r\n  if (fieldMap === fieldMap2) {\r\n    return;\r\n  } // (D) First collect any conflicts between the provided collection of fields\r\n  // and the collection of fields represented by the given fragment.\r\n\r\n  collectConflictsBetween(\r\n    context,\r\n    conflicts,\r\n    cachedFieldsAndFragmentNames,\r\n    comparedFragmentPairs,\r\n    areMutuallyExclusive,\r\n    fieldMap,\r\n    fieldMap2,\r\n  ); // (E) Then collect any conflicts between the provided collection of fields\r\n  // and any fragment names found in the given fragment.\r\n\r\n  for (const referencedFragmentName of referencedFragmentNames) {\r\n    collectConflictsBetweenFieldsAndFragment(\r\n      context,\r\n      conflicts,\r\n      cachedFieldsAndFragmentNames,\r\n      comparedFragmentPairs,\r\n      areMutuallyExclusive,\r\n      fieldMap,\r\n      referencedFragmentName,\r\n    );\r\n  }\r\n} // Collect all conflicts found between two fragments, including via spreading in\r\n// any nested fragments.\r\n\r\nfunction collectConflictsBetweenFragments(\r\n  context,\r\n  conflicts,\r\n  cachedFieldsAndFragmentNames,\r\n  comparedFragmentPairs,\r\n  areMutuallyExclusive,\r\n  fragmentName1,\r\n  fragmentName2,\r\n) {\r\n  // No need to compare a fragment to itself.\r\n  if (fragmentName1 === fragmentName2) {\r\n    return;\r\n  } // Memoize so two fragments are not compared for conflicts more than once.\r\n\r\n  if (\r\n    comparedFragmentPairs.has(\r\n      fragmentName1,\r\n      fragmentName2,\r\n      areMutuallyExclusive,\r\n    )\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\r\n  const fragment1 = context.getFragment(fragmentName1);\r\n  const fragment2 = context.getFragment(fragmentName2);\r\n\r\n  if (!fragment1 || !fragment2) {\r\n    return;\r\n  }\r\n\r\n  const [fieldMap1, referencedFragmentNames1] =\r\n    getReferencedFieldsAndFragmentNames(\r\n      context,\r\n      cachedFieldsAndFragmentNames,\r\n      fragment1,\r\n    );\r\n  const [fieldMap2, referencedFragmentNames2] =\r\n    getReferencedFieldsAndFragmentNames(\r\n      context,\r\n      cachedFieldsAndFragmentNames,\r\n      fragment2,\r\n    ); // (F) First, collect all conflicts between these two collections of fields\r\n  // (not including any nested fragments).\r\n\r\n  collectConflictsBetween(\r\n    context,\r\n    conflicts,\r\n    cachedFieldsAndFragmentNames,\r\n    comparedFragmentPairs,\r\n    areMutuallyExclusive,\r\n    fieldMap1,\r\n    fieldMap2,\r\n  ); // (G) Then collect conflicts between the first fragment and any nested\r\n  // fragments spread in the second fragment.\r\n\r\n  for (const referencedFragmentName2 of referencedFragmentNames2) {\r\n    collectConflictsBetweenFragments(\r\n      context,\r\n      conflicts,\r\n      cachedFieldsAndFragmentNames,\r\n      comparedFragmentPairs,\r\n      areMutuallyExclusive,\r\n      fragmentName1,\r\n      referencedFragmentName2,\r\n    );\r\n  } // (G) Then collect conflicts between the second fragment and any nested\r\n  // fragments spread in the first fragment.\r\n\r\n  for (const referencedFragmentName1 of referencedFragmentNames1) {\r\n    collectConflictsBetweenFragments(\r\n      context,\r\n      conflicts,\r\n      cachedFieldsAndFragmentNames,\r\n      comparedFragmentPairs,\r\n      areMutuallyExclusive,\r\n      referencedFragmentName1,\r\n      fragmentName2,\r\n    );\r\n  }\r\n} // Find all conflicts found between two selection sets, including those found\r\n// via spreading in fragments. Called when determining if conflicts exist\r\n// between the sub-fields of two overlapping fields.\r\n\r\nfunction findConflictsBetweenSubSelectionSets(\r\n  context,\r\n  cachedFieldsAndFragmentNames,\r\n  comparedFragmentPairs,\r\n  areMutuallyExclusive,\r\n  parentType1,\r\n  selectionSet1,\r\n  parentType2,\r\n  selectionSet2,\r\n) {\r\n  const conflicts = [];\r\n  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(\r\n    context,\r\n    cachedFieldsAndFragmentNames,\r\n    parentType1,\r\n    selectionSet1,\r\n  );\r\n  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(\r\n    context,\r\n    cachedFieldsAndFragmentNames,\r\n    parentType2,\r\n    selectionSet2,\r\n  ); // (H) First, collect all conflicts between these two collections of field.\r\n\r\n  collectConflictsBetween(\r\n    context,\r\n    conflicts,\r\n    cachedFieldsAndFragmentNames,\r\n    comparedFragmentPairs,\r\n    areMutuallyExclusive,\r\n    fieldMap1,\r\n    fieldMap2,\r\n  ); // (I) Then collect conflicts between the first collection of fields and\r\n  // those referenced by each fragment name associated with the second.\r\n\r\n  for (const fragmentName2 of fragmentNames2) {\r\n    collectConflictsBetweenFieldsAndFragment(\r\n      context,\r\n      conflicts,\r\n      cachedFieldsAndFragmentNames,\r\n      comparedFragmentPairs,\r\n      areMutuallyExclusive,\r\n      fieldMap1,\r\n      fragmentName2,\r\n    );\r\n  } // (I) Then collect conflicts between the second collection of fields and\r\n  // those referenced by each fragment name associated with the first.\r\n\r\n  for (const fragmentName1 of fragmentNames1) {\r\n    collectConflictsBetweenFieldsAndFragment(\r\n      context,\r\n      conflicts,\r\n      cachedFieldsAndFragmentNames,\r\n      comparedFragmentPairs,\r\n      areMutuallyExclusive,\r\n      fieldMap2,\r\n      fragmentName1,\r\n    );\r\n  } // (J) Also collect conflicts between any fragment names by the first and\r\n  // fragment names by the second. This compares each item in the first set of\r\n  // names to each item in the second set of names.\r\n\r\n  for (const fragmentName1 of fragmentNames1) {\r\n    for (const fragmentName2 of fragmentNames2) {\r\n      collectConflictsBetweenFragments(\r\n        context,\r\n        conflicts,\r\n        cachedFieldsAndFragmentNames,\r\n        comparedFragmentPairs,\r\n        areMutuallyExclusive,\r\n        fragmentName1,\r\n        fragmentName2,\r\n      );\r\n    }\r\n  }\r\n\r\n  return conflicts;\r\n} // Collect all Conflicts \"within\" one collection of fields.\r\n\r\nfunction collectConflictsWithin(\r\n  context,\r\n  conflicts,\r\n  cachedFieldsAndFragmentNames,\r\n  comparedFragmentPairs,\r\n  fieldMap,\r\n) {\r\n  // A field map is a keyed collection, where each key represents a response\r\n  // name and the value at that key is a list of all fields which provide that\r\n  // response name. For every response name, if there are multiple fields, they\r\n  // must be compared to find a potential conflict.\r\n  for (const [responseName, fields] of Object.entries(fieldMap)) {\r\n    // This compares every field in the list to every other field in this list\r\n    // (except to itself). If the list only has one item, nothing needs to\r\n    // be compared.\r\n    if (fields.length > 1) {\r\n      for (let i = 0; i < fields.length; i++) {\r\n        for (let j = i + 1; j < fields.length; j++) {\r\n          const conflict = findConflict(\r\n            context,\r\n            cachedFieldsAndFragmentNames,\r\n            comparedFragmentPairs,\r\n            false, // within one collection is never mutually exclusive\r\n            responseName,\r\n            fields[i],\r\n            fields[j],\r\n          );\r\n\r\n          if (conflict) {\r\n            conflicts.push(conflict);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n} // Collect all Conflicts between two collections of fields. This is similar to,\r\n// but different from the `collectConflictsWithin` function above. This check\r\n// assumes that `collectConflictsWithin` has already been called on each\r\n// provided collection of fields. This is true because this validator traverses\r\n// each individual selection set.\r\n\r\nfunction collectConflictsBetween(\r\n  context,\r\n  conflicts,\r\n  cachedFieldsAndFragmentNames,\r\n  comparedFragmentPairs,\r\n  parentFieldsAreMutuallyExclusive,\r\n  fieldMap1,\r\n  fieldMap2,\r\n) {\r\n  // A field map is a keyed collection, where each key represents a response\r\n  // name and the value at that key is a list of all fields which provide that\r\n  // response name. For any response name which appears in both provided field\r\n  // maps, each field from the first field map must be compared to every field\r\n  // in the second field map to find potential conflicts.\r\n  for (const [responseName, fields1] of Object.entries(fieldMap1)) {\r\n    const fields2 = fieldMap2[responseName];\r\n\r\n    if (fields2) {\r\n      for (const field1 of fields1) {\r\n        for (const field2 of fields2) {\r\n          const conflict = findConflict(\r\n            context,\r\n            cachedFieldsAndFragmentNames,\r\n            comparedFragmentPairs,\r\n            parentFieldsAreMutuallyExclusive,\r\n            responseName,\r\n            field1,\r\n            field2,\r\n          );\r\n\r\n          if (conflict) {\r\n            conflicts.push(conflict);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n} // Determines if there is a conflict between two particular fields, including\r\n// comparing their sub-fields.\r\n\r\nfunction findConflict(\r\n  context,\r\n  cachedFieldsAndFragmentNames,\r\n  comparedFragmentPairs,\r\n  parentFieldsAreMutuallyExclusive,\r\n  responseName,\r\n  field1,\r\n  field2,\r\n) {\r\n  const [parentType1, node1, def1] = field1;\r\n  const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same\r\n  // time, due to the parent types, then it is safe to permit them to diverge\r\n  // in aliased field or arguments used as they will not present any ambiguity\r\n  // by differing.\r\n  // It is known that two parent types could never overlap if they are\r\n  // different Object types. Interface or Union types might overlap - if not\r\n  // in the current state of the schema, then perhaps in some future version,\r\n  // thus may not safely diverge.\r\n\r\n  const areMutuallyExclusive =\r\n    parentFieldsAreMutuallyExclusive ||\r\n    (parentType1 !== parentType2 &&\r\n      isObjectType(parentType1) &&\r\n      isObjectType(parentType2));\r\n\r\n  if (!areMutuallyExclusive) {\r\n    var _node1$arguments, _node2$arguments;\r\n\r\n    // Two aliases must refer to the same field.\r\n    const name1 = node1.name.value;\r\n    const name2 = node2.name.value;\r\n\r\n    if (name1 !== name2) {\r\n      return [\r\n        [responseName, `\"${name1}\" and \"${name2}\" are different fields`],\r\n        [node1],\r\n        [node2],\r\n      ];\r\n    } // FIXME https://github.com/graphql/graphql-js/issues/2203\r\n\r\n    const args1 =\r\n      /* c8 ignore next */\r\n      (_node1$arguments = node1.arguments) !== null &&\r\n      _node1$arguments !== void 0\r\n        ? _node1$arguments\r\n        : [];\r\n    const args2 =\r\n      /* c8 ignore next */\r\n      (_node2$arguments = node2.arguments) !== null &&\r\n      _node2$arguments !== void 0\r\n        ? _node2$arguments\r\n        : []; // Two field calls must have the same arguments.\r\n\r\n    if (!sameArguments(args1, args2)) {\r\n      return [\r\n        [responseName, 'they have differing arguments'],\r\n        [node1],\r\n        [node2],\r\n      ];\r\n    }\r\n  } // The return type for each field.\r\n\r\n  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\r\n  const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\r\n\r\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\r\n    return [\r\n      [\r\n        responseName,\r\n        `they return conflicting types \"${inspect(type1)}\" and \"${inspect(\r\n          type2,\r\n        )}\"`,\r\n      ],\r\n      [node1],\r\n      [node2],\r\n    ];\r\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\r\n  // for both collections so fields in a fragment reference are never\r\n  // compared to themselves.\r\n\r\n  const selectionSet1 = node1.selectionSet;\r\n  const selectionSet2 = node2.selectionSet;\r\n\r\n  if (selectionSet1 && selectionSet2) {\r\n    const conflicts = findConflictsBetweenSubSelectionSets(\r\n      context,\r\n      cachedFieldsAndFragmentNames,\r\n      comparedFragmentPairs,\r\n      areMutuallyExclusive,\r\n      getNamedType(type1),\r\n      selectionSet1,\r\n      getNamedType(type2),\r\n      selectionSet2,\r\n    );\r\n    return subfieldConflicts(conflicts, responseName, node1, node2);\r\n  }\r\n}\r\n\r\nfunction sameArguments(arguments1, arguments2) {\r\n  if (arguments1.length !== arguments2.length) {\r\n    return false;\r\n  }\r\n\r\n  return arguments1.every((argument1) => {\r\n    const argument2 = arguments2.find(\r\n      (argument) => argument.name.value === argument1.name.value,\r\n    );\r\n\r\n    if (!argument2) {\r\n      return false;\r\n    }\r\n\r\n    return sameValue(argument1.value, argument2.value);\r\n  });\r\n}\r\n\r\nfunction sameValue(value1, value2) {\r\n  return print(value1) === print(value2);\r\n} // Two types conflict if both types could not apply to a value simultaneously.\r\n// Composite types are ignored as their individual field types will be compared\r\n// later recursively. However List and Non-Null types must match.\r\n\r\nfunction doTypesConflict(type1, type2) {\r\n  if (isListType(type1)) {\r\n    return isListType(type2)\r\n      ? doTypesConflict(type1.ofType, type2.ofType)\r\n      : true;\r\n  }\r\n\r\n  if (isListType(type2)) {\r\n    return true;\r\n  }\r\n\r\n  if (isNonNullType(type1)) {\r\n    return isNonNullType(type2)\r\n      ? doTypesConflict(type1.ofType, type2.ofType)\r\n      : true;\r\n  }\r\n\r\n  if (isNonNullType(type2)) {\r\n    return true;\r\n  }\r\n\r\n  if (isLeafType(type1) || isLeafType(type2)) {\r\n    return type1 !== type2;\r\n  }\r\n\r\n  return false;\r\n} // Given a selection set, return the collection of fields (a mapping of response\r\n// name to field nodes and definitions) as well as a list of fragment names\r\n// referenced via fragment spreads.\r\n\r\nfunction getFieldsAndFragmentNames(\r\n  context,\r\n  cachedFieldsAndFragmentNames,\r\n  parentType,\r\n  selectionSet,\r\n) {\r\n  const cached = cachedFieldsAndFragmentNames.get(selectionSet);\r\n\r\n  if (cached) {\r\n    return cached;\r\n  }\r\n\r\n  const nodeAndDefs = Object.create(null);\r\n  const fragmentNames = Object.create(null);\r\n\r\n  _collectFieldsAndFragmentNames(\r\n    context,\r\n    parentType,\r\n    selectionSet,\r\n    nodeAndDefs,\r\n    fragmentNames,\r\n  );\r\n\r\n  const result = [nodeAndDefs, Object.keys(fragmentNames)];\r\n  cachedFieldsAndFragmentNames.set(selectionSet, result);\r\n  return result;\r\n} // Given a reference to a fragment, return the represented collection of fields\r\n// as well as a list of nested fragment names referenced via fragment spreads.\r\n\r\nfunction getReferencedFieldsAndFragmentNames(\r\n  context,\r\n  cachedFieldsAndFragmentNames,\r\n  fragment,\r\n) {\r\n  // Short-circuit building a type from the node if possible.\r\n  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\r\n\r\n  if (cached) {\r\n    return cached;\r\n  }\r\n\r\n  const fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\r\n  return getFieldsAndFragmentNames(\r\n    context,\r\n    cachedFieldsAndFragmentNames,\r\n    fragmentType,\r\n    fragment.selectionSet,\r\n  );\r\n}\r\n\r\nfunction _collectFieldsAndFragmentNames(\r\n  context,\r\n  parentType,\r\n  selectionSet,\r\n  nodeAndDefs,\r\n  fragmentNames,\r\n) {\r\n  for (const selection of selectionSet.selections) {\r\n    switch (selection.kind) {\r\n      case Kind.FIELD: {\r\n        const fieldName = selection.name.value;\r\n        let fieldDef;\r\n\r\n        if (isObjectType(parentType) || isInterfaceType(parentType)) {\r\n          fieldDef = parentType.getFields()[fieldName];\r\n        }\r\n\r\n        const responseName = selection.alias\r\n          ? selection.alias.value\r\n          : fieldName;\r\n\r\n        if (!nodeAndDefs[responseName]) {\r\n          nodeAndDefs[responseName] = [];\r\n        }\r\n\r\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\r\n        break;\r\n      }\r\n\r\n      case Kind.FRAGMENT_SPREAD:\r\n        fragmentNames[selection.name.value] = true;\r\n        break;\r\n\r\n      case Kind.INLINE_FRAGMENT: {\r\n        const typeCondition = selection.typeCondition;\r\n        const inlineFragmentType = typeCondition\r\n          ? typeFromAST(context.getSchema(), typeCondition)\r\n          : parentType;\r\n\r\n        _collectFieldsAndFragmentNames(\r\n          context,\r\n          inlineFragmentType,\r\n          selection.selectionSet,\r\n          nodeAndDefs,\r\n          fragmentNames,\r\n        );\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n} // Given a series of Conflicts which occurred between two sub-fields, generate\r\n// a single Conflict.\r\n\r\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\r\n  if (conflicts.length > 0) {\r\n    return [\r\n      [responseName, conflicts.map(([reason]) => reason)],\r\n      [node1, ...conflicts.map(([, fields1]) => fields1).flat()],\r\n      [node2, ...conflicts.map(([, , fields2]) => fields2).flat()],\r\n    ];\r\n  }\r\n}\r\n/**\r\n * A way to keep track of pairs of things when the ordering of the pair does not matter.\r\n */\r\n\r\nclass PairSet {\r\n  constructor() {\r\n    this._data = new Map();\r\n  }\r\n\r\n  has(a, b, areMutuallyExclusive) {\r\n    var _this$_data$get;\r\n\r\n    const [key1, key2] = a < b ? [a, b] : [b, a];\r\n    const result =\r\n      (_this$_data$get = this._data.get(key1)) === null ||\r\n      _this$_data$get === void 0\r\n        ? void 0\r\n        : _this$_data$get.get(key2);\r\n\r\n    if (result === undefined) {\r\n      return false;\r\n    } // areMutuallyExclusive being false is a superset of being true, hence if\r\n    // we want to know if this PairSet \"has\" these two with no exclusivity,\r\n    // we have to ensure it was added as such.\r\n\r\n    return areMutuallyExclusive ? true : areMutuallyExclusive === result;\r\n  }\r\n\r\n  add(a, b, areMutuallyExclusive) {\r\n    const [key1, key2] = a < b ? [a, b] : [b, a];\r\n\r\n    const map = this._data.get(key1);\r\n\r\n    if (map === undefined) {\r\n      this._data.set(key1, new Map([[key2, areMutuallyExclusive]]));\r\n    } else {\r\n      map.set(key2, areMutuallyExclusive);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}