{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\n/**\r\n * Executable definitions\r\n *\r\n * A GraphQL document is only valid for execution if all definitions are either\r\n * operation or fragment definitions.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\r\n */\n\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document(node) {\n      for (const definition of node.definitions) {\n        if (!isExecutableDefinitionNode(definition)) {\n          const defName = definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : '\"' + definition.name.value + '\"';\n          context.reportError(new GraphQLError(`The ${defName} definition is not executable.`, definition));\n        }\n      }\n\n      return false;\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs"],"names":["GraphQLError","Kind","isExecutableDefinitionNode","ExecutableDefinitionsRule","context","Document","node","definition","definitions","defName","kind","SCHEMA_DEFINITION","SCHEMA_EXTENSION","name","value","reportError"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,SAASC,0BAAT,QAA2C,+BAA3C;AAEA;;;;;;;;;AAQA,OAAO,SAASC,yBAAT,CAAmCC,OAAnC,EAA4C;AACjD,SAAO;AACLC,IAAAA,QAAQ,CAACC,IAAD,EAAO;AACb,WAAK,MAAMC,UAAX,IAAyBD,IAAI,CAACE,WAA9B,EAA2C;AACzC,YAAI,CAACN,0BAA0B,CAACK,UAAD,CAA/B,EAA6C;AAC3C,gBAAME,OAAO,GACXF,UAAU,CAACG,IAAX,KAAoBT,IAAI,CAACU,iBAAzB,IACAJ,UAAU,CAACG,IAAX,KAAoBT,IAAI,CAACW,gBADzB,GAEI,QAFJ,GAGI,MAAML,UAAU,CAACM,IAAX,CAAgBC,KAAtB,GAA8B,GAJpC;AAKAV,UAAAA,OAAO,CAACW,WAAR,CACE,IAAIf,YAAJ,CACG,OAAMS,OAAQ,gCADjB,EAEEF,UAFF,CADF;AAMD;AACF;;AAED,aAAO,KAAP;AACD;;AAnBI,GAAP;AAqBD","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\r\nimport { Kind } from '../../language/kinds.mjs';\r\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\r\n\r\n/**\r\n * Executable definitions\r\n *\r\n * A GraphQL document is only valid for execution if all definitions are either\r\n * operation or fragment definitions.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\r\n */\r\nexport function ExecutableDefinitionsRule(context) {\r\n  return {\r\n    Document(node) {\r\n      for (const definition of node.definitions) {\r\n        if (!isExecutableDefinitionNode(definition)) {\r\n          const defName =\r\n            definition.kind === Kind.SCHEMA_DEFINITION ||\r\n            definition.kind === Kind.SCHEMA_EXTENSION\r\n              ? 'schema'\r\n              : '\"' + definition.name.value + '\"';\r\n          context.reportError(\r\n            new GraphQLError(\r\n              `The ${defName} definition is not executable.`,\r\n              definition,\r\n            ),\r\n          );\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}