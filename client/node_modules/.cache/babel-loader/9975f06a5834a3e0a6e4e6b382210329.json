{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n/**\r\n * Fragments on composite type\r\n *\r\n * Fragments use a type condition to determine if they apply, since fragments\r\n * can only be spread into a composite type (object, interface, or union), the\r\n * type condition must also be a composite type.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\r\n */\n\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          const typeStr = print(typeCondition);\n          context.reportError(new GraphQLError(`Fragment cannot condition on non composite type \"${typeStr}\".`, typeCondition));\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        const typeStr = print(node.typeCondition);\n        context.reportError(new GraphQLError(`Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`, node.typeCondition));\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs"],"names":["GraphQLError","print","isCompositeType","typeFromAST","FragmentsOnCompositeTypesRule","context","InlineFragment","node","typeCondition","type","getSchema","typeStr","reportError","FragmentDefinition","name","value"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAEA;;;;;;;;;;AASA,OAAO,SAASC,6BAAT,CAAuCC,OAAvC,EAAgD;AACrD,SAAO;AACLC,IAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,YAAMC,aAAa,GAAGD,IAAI,CAACC,aAA3B;;AAEA,UAAIA,aAAJ,EAAmB;AACjB,cAAMC,IAAI,GAAGN,WAAW,CAACE,OAAO,CAACK,SAAR,EAAD,EAAsBF,aAAtB,CAAxB;;AAEA,YAAIC,IAAI,IAAI,CAACP,eAAe,CAACO,IAAD,CAA5B,EAAoC;AAClC,gBAAME,OAAO,GAAGV,KAAK,CAACO,aAAD,CAArB;AACAH,UAAAA,OAAO,CAACO,WAAR,CACE,IAAIZ,YAAJ,CACG,oDAAmDW,OAAQ,IAD9D,EAEEH,aAFF,CADF;AAMD;AACF;AACF,KAjBI;;AAmBLK,IAAAA,kBAAkB,CAACN,IAAD,EAAO;AACvB,YAAME,IAAI,GAAGN,WAAW,CAACE,OAAO,CAACK,SAAR,EAAD,EAAsBH,IAAI,CAACC,aAA3B,CAAxB;;AAEA,UAAIC,IAAI,IAAI,CAACP,eAAe,CAACO,IAAD,CAA5B,EAAoC;AAClC,cAAME,OAAO,GAAGV,KAAK,CAACM,IAAI,CAACC,aAAN,CAArB;AACAH,QAAAA,OAAO,CAACO,WAAR,CACE,IAAIZ,YAAJ,CACG,aAAYO,IAAI,CAACO,IAAL,CAAUC,KAAM,6CAA4CJ,OAAQ,IADnF,EAEEJ,IAAI,CAACC,aAFP,CADF;AAMD;AACF;;AA/BI,GAAP;AAiCD","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\r\nimport { print } from '../../language/printer.mjs';\r\nimport { isCompositeType } from '../../type/definition.mjs';\r\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\r\n\r\n/**\r\n * Fragments on composite type\r\n *\r\n * Fragments use a type condition to determine if they apply, since fragments\r\n * can only be spread into a composite type (object, interface, or union), the\r\n * type condition must also be a composite type.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\r\n */\r\nexport function FragmentsOnCompositeTypesRule(context) {\r\n  return {\r\n    InlineFragment(node) {\r\n      const typeCondition = node.typeCondition;\r\n\r\n      if (typeCondition) {\r\n        const type = typeFromAST(context.getSchema(), typeCondition);\r\n\r\n        if (type && !isCompositeType(type)) {\r\n          const typeStr = print(typeCondition);\r\n          context.reportError(\r\n            new GraphQLError(\r\n              `Fragment cannot condition on non composite type \"${typeStr}\".`,\r\n              typeCondition,\r\n            ),\r\n          );\r\n        }\r\n      }\r\n    },\r\n\r\n    FragmentDefinition(node) {\r\n      const type = typeFromAST(context.getSchema(), node.typeCondition);\r\n\r\n      if (type && !isCompositeType(type)) {\r\n        const typeStr = print(node.typeCondition);\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`,\r\n            node.typeCondition,\r\n          ),\r\n        );\r\n      }\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}