{"ast":null,"code":"import { devAssert } from '../jsutils/devAssert.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { parse } from '../language/parser.mjs';\nimport { assertValidSDL } from '../validation/validate.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\nimport { specifiedDirectives } from '../type/directives.mjs';\nimport { extendSchemaImpl } from './extendSchema.mjs';\n/**\r\n * This takes the ast of a schema document produced by the parse function in\r\n * src/language/parser.js.\r\n *\r\n * If no schema definition is provided, then it will look for types named Query,\r\n * Mutation and Subscription.\r\n *\r\n * Given that AST it constructs a GraphQLSchema. The resulting schema\r\n * has no resolve methods, so execution will use default resolvers.\r\n */\n\nexport function buildASTSchema(documentAST, options) {\n  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(false, 'Must provide valid Document AST.');\n\n  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {\n    assertValidSDL(documentAST);\n  }\n\n  const emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: Object.create(null),\n    extensionASTNodes: [],\n    assumeValid: false\n  };\n  const config = extendSchemaImpl(emptySchemaConfig, documentAST, options);\n\n  if (config.astNode == null) {\n    for (const type of config.types) {\n      switch (type.name) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        case 'Query':\n          // @ts-expect-error validated in `validateSchema`\n          config.query = type;\n          break;\n\n        case 'Mutation':\n          // @ts-expect-error validated in `validateSchema`\n          config.mutation = type;\n          break;\n\n        case 'Subscription':\n          // @ts-expect-error validated in `validateSchema`\n          config.subscription = type;\n          break;\n      }\n    }\n  }\n\n  const directives = [...config.directives, // If specified directives were not explicitly declared, add them.\n  ...specifiedDirectives.filter(stdDirective => config.directives.every(directive => directive.name !== stdDirective.name))];\n  return new GraphQLSchema({ ...config,\n    directives\n  });\n}\n/**\r\n * A helper function to build a GraphQLSchema directly from a source\r\n * document.\r\n */\n\nexport function buildSchema(source, options) {\n  const document = parse(source, {\n    noLocation: options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacyFragmentVariables: options === null || options === void 0 ? void 0 : options.allowLegacyFragmentVariables\n  });\n  return buildASTSchema(document, {\n    assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid\n  });\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/utilities/buildASTSchema.mjs"],"names":["devAssert","Kind","parse","assertValidSDL","GraphQLSchema","specifiedDirectives","extendSchemaImpl","buildASTSchema","documentAST","options","kind","DOCUMENT","assumeValid","assumeValidSDL","emptySchemaConfig","description","undefined","types","directives","extensions","Object","create","extensionASTNodes","config","astNode","type","name","query","mutation","subscription","filter","stdDirective","every","directive","buildSchema","source","document","noLocation","allowLegacyFragmentVariables"],"mappings":"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","sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\r\nimport { Kind } from '../language/kinds.mjs';\r\nimport { parse } from '../language/parser.mjs';\r\nimport { assertValidSDL } from '../validation/validate.mjs';\r\nimport { GraphQLSchema } from '../type/schema.mjs';\r\nimport { specifiedDirectives } from '../type/directives.mjs';\r\nimport { extendSchemaImpl } from './extendSchema.mjs';\r\n\r\n/**\r\n * This takes the ast of a schema document produced by the parse function in\r\n * src/language/parser.js.\r\n *\r\n * If no schema definition is provided, then it will look for types named Query,\r\n * Mutation and Subscription.\r\n *\r\n * Given that AST it constructs a GraphQLSchema. The resulting schema\r\n * has no resolve methods, so execution will use default resolvers.\r\n */\r\nexport function buildASTSchema(documentAST, options) {\r\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\r\n    devAssert(false, 'Must provide valid Document AST.');\r\n\r\n  if (\r\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\r\n      true &&\r\n    (options === null || options === void 0\r\n      ? void 0\r\n      : options.assumeValidSDL) !== true\r\n  ) {\r\n    assertValidSDL(documentAST);\r\n  }\r\n\r\n  const emptySchemaConfig = {\r\n    description: undefined,\r\n    types: [],\r\n    directives: [],\r\n    extensions: Object.create(null),\r\n    extensionASTNodes: [],\r\n    assumeValid: false,\r\n  };\r\n  const config = extendSchemaImpl(emptySchemaConfig, documentAST, options);\r\n\r\n  if (config.astNode == null) {\r\n    for (const type of config.types) {\r\n      switch (type.name) {\r\n        // Note: While this could make early assertions to get the correctly\r\n        // typed values below, that would throw immediately while type system\r\n        // validation with validateSchema() will produce more actionable results.\r\n        case 'Query':\r\n          // @ts-expect-error validated in `validateSchema`\r\n          config.query = type;\r\n          break;\r\n\r\n        case 'Mutation':\r\n          // @ts-expect-error validated in `validateSchema`\r\n          config.mutation = type;\r\n          break;\r\n\r\n        case 'Subscription':\r\n          // @ts-expect-error validated in `validateSchema`\r\n          config.subscription = type;\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  const directives = [\r\n    ...config.directives, // If specified directives were not explicitly declared, add them.\r\n    ...specifiedDirectives.filter((stdDirective) =>\r\n      config.directives.every(\r\n        (directive) => directive.name !== stdDirective.name,\r\n      ),\r\n    ),\r\n  ];\r\n  return new GraphQLSchema({ ...config, directives });\r\n}\r\n/**\r\n * A helper function to build a GraphQLSchema directly from a source\r\n * document.\r\n */\r\n\r\nexport function buildSchema(source, options) {\r\n  const document = parse(source, {\r\n    noLocation:\r\n      options === null || options === void 0 ? void 0 : options.noLocation,\r\n    allowLegacyFragmentVariables:\r\n      options === null || options === void 0\r\n        ? void 0\r\n        : options.allowLegacyFragmentVariables,\r\n  });\r\n  return buildASTSchema(document, {\r\n    assumeValidSDL:\r\n      options === null || options === void 0 ? void 0 : options.assumeValidSDL,\r\n    assumeValid:\r\n      options === null || options === void 0 ? void 0 : options.assumeValid,\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}