{"ast":null,"code":"import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isNonNullType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\n/**\r\n * Variables in allowed position\r\n *\r\n * Variable usages must be compatible with the arguments they are passed to.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\r\n */\n\nexport function VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const {\n          node,\n          type,\n          defaultValue\n        } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = typeFromAST(schema, varDef.type);\n\n            if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n              const varTypeStr = inspect(varType);\n              const typeStr = inspect(type);\n              context.reportError(new GraphQLError(`Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`, [varDef, node]));\n            }\n          }\n        }\n      }\n\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n\n  };\n}\n/**\r\n * Returns true if the variable is allowed in the location it was found,\r\n * which includes considering if default values exist for either the variable\r\n * or the location at which it is located.\r\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    const hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs"],"names":["inspect","GraphQLError","Kind","isNonNullType","typeFromAST","isTypeSubTypeOf","VariablesInAllowedPositionRule","context","varDefMap","Object","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","node","type","defaultValue","varName","name","value","varDef","schema","getSchema","varType","allowedVariableUsage","varTypeStr","typeStr","reportError","VariableDefinition","variable","varDefaultValue","locationType","locationDefaultValue","hasNonNullVariableDefaultValue","kind","NULL","hasLocationDefaultValue","undefined","nullableLocationType","ofType"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAASC,eAAT,QAAgC,qCAAhC;AAEA;;;;;;;;AAOA,OAAO,SAASC,8BAAT,CAAwCC,OAAxC,EAAiD;AACtD,MAAIC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAhB;AACA,SAAO;AACLC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,KAAK,GAAG;AACNJ,QAAAA,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAZ;AACD,OAHkB;;AAKnBG,MAAAA,KAAK,CAACC,SAAD,EAAY;AACf,cAAMC,MAAM,GAAGR,OAAO,CAACS,0BAAR,CAAmCF,SAAnC,CAAf;;AAEA,aAAK,MAAM;AAAEG,UAAAA,IAAF;AAAQC,UAAAA,IAAR;AAAcC,UAAAA;AAAd,SAAX,IAA2CJ,MAA3C,EAAmD;AACjD,gBAAMK,OAAO,GAAGH,IAAI,CAACI,IAAL,CAAUC,KAA1B;AACA,gBAAMC,MAAM,GAAGf,SAAS,CAACY,OAAD,CAAxB;;AAEA,cAAIG,MAAM,IAAIL,IAAd,EAAoB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAMM,MAAM,GAAGjB,OAAO,CAACkB,SAAR,EAAf;AACA,kBAAMC,OAAO,GAAGtB,WAAW,CAACoB,MAAD,EAASD,MAAM,CAACL,IAAhB,CAA3B;;AAEA,gBACEQ,OAAO,IACP,CAACC,oBAAoB,CACnBH,MADmB,EAEnBE,OAFmB,EAGnBH,MAAM,CAACJ,YAHY,EAInBD,IAJmB,EAKnBC,YALmB,CAFvB,EASE;AACA,oBAAMS,UAAU,GAAG5B,OAAO,CAAC0B,OAAD,CAA1B;AACA,oBAAMG,OAAO,GAAG7B,OAAO,CAACkB,IAAD,CAAvB;AACAX,cAAAA,OAAO,CAACuB,WAAR,CACE,IAAI7B,YAAJ,CACG,cAAamB,OAAQ,cAAaQ,UAAW,sCAAqCC,OAAQ,IAD7F,EAEE,CAACN,MAAD,EAASN,IAAT,CAFF,CADF;AAMD;AACF;AACF;AACF;;AA1CkB,KADhB;;AA8CLc,IAAAA,kBAAkB,CAACd,IAAD,EAAO;AACvBT,MAAAA,SAAS,CAACS,IAAI,CAACe,QAAL,CAAcX,IAAd,CAAmBC,KAApB,CAAT,GAAsCL,IAAtC;AACD;;AAhDI,GAAP;AAkDD;AACD;;;;;;AAMA,SAASU,oBAAT,CACEH,MADF,EAEEE,OAFF,EAGEO,eAHF,EAIEC,YAJF,EAKEC,oBALF,EAME;AACA,MAAIhC,aAAa,CAAC+B,YAAD,CAAb,IAA+B,CAAC/B,aAAa,CAACuB,OAAD,CAAjD,EAA4D;AAC1D,UAAMU,8BAA8B,GAClCH,eAAe,IAAI,IAAnB,IAA2BA,eAAe,CAACI,IAAhB,KAAyBnC,IAAI,CAACoC,IAD3D;AAEA,UAAMC,uBAAuB,GAAGJ,oBAAoB,KAAKK,SAAzD;;AAEA,QAAI,CAACJ,8BAAD,IAAmC,CAACG,uBAAxC,EAAiE;AAC/D,aAAO,KAAP;AACD;;AAED,UAAME,oBAAoB,GAAGP,YAAY,CAACQ,MAA1C;AACA,WAAOrC,eAAe,CAACmB,MAAD,EAASE,OAAT,EAAkBe,oBAAlB,CAAtB;AACD;;AAED,SAAOpC,eAAe,CAACmB,MAAD,EAASE,OAAT,EAAkBQ,YAAlB,CAAtB;AACD","sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\r\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\r\nimport { Kind } from '../../language/kinds.mjs';\r\nimport { isNonNullType } from '../../type/definition.mjs';\r\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\r\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\r\n\r\n/**\r\n * Variables in allowed position\r\n *\r\n * Variable usages must be compatible with the arguments they are passed to.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\r\n */\r\nexport function VariablesInAllowedPositionRule(context) {\r\n  let varDefMap = Object.create(null);\r\n  return {\r\n    OperationDefinition: {\r\n      enter() {\r\n        varDefMap = Object.create(null);\r\n      },\r\n\r\n      leave(operation) {\r\n        const usages = context.getRecursiveVariableUsages(operation);\r\n\r\n        for (const { node, type, defaultValue } of usages) {\r\n          const varName = node.name.value;\r\n          const varDef = varDefMap[varName];\r\n\r\n          if (varDef && type) {\r\n            // A var type is allowed if it is the same or more strict (e.g. is\r\n            // a subtype of) than the expected type. It can be more strict if\r\n            // the variable type is non-null when the expected type is nullable.\r\n            // If both are list types, the variable item type can be more strict\r\n            // than the expected item type (contravariant).\r\n            const schema = context.getSchema();\r\n            const varType = typeFromAST(schema, varDef.type);\r\n\r\n            if (\r\n              varType &&\r\n              !allowedVariableUsage(\r\n                schema,\r\n                varType,\r\n                varDef.defaultValue,\r\n                type,\r\n                defaultValue,\r\n              )\r\n            ) {\r\n              const varTypeStr = inspect(varType);\r\n              const typeStr = inspect(type);\r\n              context.reportError(\r\n                new GraphQLError(\r\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\r\n                  [varDef, node],\r\n                ),\r\n              );\r\n            }\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n    VariableDefinition(node) {\r\n      varDefMap[node.variable.name.value] = node;\r\n    },\r\n  };\r\n}\r\n/**\r\n * Returns true if the variable is allowed in the location it was found,\r\n * which includes considering if default values exist for either the variable\r\n * or the location at which it is located.\r\n */\r\n\r\nfunction allowedVariableUsage(\r\n  schema,\r\n  varType,\r\n  varDefaultValue,\r\n  locationType,\r\n  locationDefaultValue,\r\n) {\r\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\r\n    const hasNonNullVariableDefaultValue =\r\n      varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\r\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\r\n\r\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\r\n      return false;\r\n    }\r\n\r\n    const nullableLocationType = locationType.ofType;\r\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\r\n  }\r\n\r\n  return isTypeSubTypeOf(schema, varType, locationType);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}