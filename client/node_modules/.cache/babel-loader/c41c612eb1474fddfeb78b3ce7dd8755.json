{"ast":null,"code":"import { invariant } from '../../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../../error/GraphQLError.mjs';\nimport { getNamedType, isInputObjectType } from '../../../type/definition.mjs';\n/**\r\n * No deprecated\r\n *\r\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\r\n * deprecated.\r\n *\r\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\r\n * Specification. The main purpose of this rule is detection of deprecated usages and not\r\n * necessarily to forbid their use when querying a service.\r\n */\n\nexport function NoDeprecatedCustomRule(context) {\n  return {\n    Field(node) {\n      const fieldDef = context.getFieldDef();\n      const deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;\n\n      if (fieldDef && deprecationReason != null) {\n        const parentType = context.getParentType();\n        parentType != null || invariant(false);\n        context.reportError(new GraphQLError(`The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`, node));\n      }\n    },\n\n    Argument(node) {\n      const argDef = context.getArgument();\n      const deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;\n\n      if (argDef && deprecationReason != null) {\n        const directiveDef = context.getDirective();\n\n        if (directiveDef != null) {\n          context.reportError(new GraphQLError(`Directive \"@${directiveDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`, node));\n        } else {\n          const parentType = context.getParentType();\n          const fieldDef = context.getFieldDef();\n          parentType != null && fieldDef != null || invariant(false);\n          context.reportError(new GraphQLError(`Field \"${parentType.name}.${fieldDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`, node));\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const inputObjectDef = getNamedType(context.getParentInputType());\n\n      if (isInputObjectType(inputObjectDef)) {\n        const inputFieldDef = inputObjectDef.getFields()[node.name.value];\n        const deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;\n\n        if (deprecationReason != null) {\n          context.reportError(new GraphQLError(`The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`, node));\n        }\n      }\n    },\n\n    EnumValue(node) {\n      const enumValueDef = context.getEnumValue();\n      const deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;\n\n      if (enumValueDef && deprecationReason != null) {\n        const enumTypeDef = getNamedType(context.getInputType());\n        enumTypeDef != null || invariant(false);\n        context.reportError(new GraphQLError(`The enum value \"${enumTypeDef.name}.${enumValueDef.name}\" is deprecated. ${deprecationReason}`, node));\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs"],"names":["invariant","GraphQLError","getNamedType","isInputObjectType","NoDeprecatedCustomRule","context","Field","node","fieldDef","getFieldDef","deprecationReason","parentType","getParentType","reportError","name","Argument","argDef","getArgument","directiveDef","getDirective","ObjectField","inputObjectDef","getParentInputType","inputFieldDef","getFields","value","EnumValue","enumValueDef","getEnumValue","enumTypeDef","getInputType"],"mappings":"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","sourcesContent":["import { invariant } from '../../../jsutils/invariant.mjs';\r\nimport { GraphQLError } from '../../../error/GraphQLError.mjs';\r\nimport { getNamedType, isInputObjectType } from '../../../type/definition.mjs';\r\n\r\n/**\r\n * No deprecated\r\n *\r\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\r\n * deprecated.\r\n *\r\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\r\n * Specification. The main purpose of this rule is detection of deprecated usages and not\r\n * necessarily to forbid their use when querying a service.\r\n */\r\nexport function NoDeprecatedCustomRule(context) {\r\n  return {\r\n    Field(node) {\r\n      const fieldDef = context.getFieldDef();\r\n      const deprecationReason =\r\n        fieldDef === null || fieldDef === void 0\r\n          ? void 0\r\n          : fieldDef.deprecationReason;\r\n\r\n      if (fieldDef && deprecationReason != null) {\r\n        const parentType = context.getParentType();\r\n        parentType != null || invariant(false);\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`,\r\n            node,\r\n          ),\r\n        );\r\n      }\r\n    },\r\n\r\n    Argument(node) {\r\n      const argDef = context.getArgument();\r\n      const deprecationReason =\r\n        argDef === null || argDef === void 0\r\n          ? void 0\r\n          : argDef.deprecationReason;\r\n\r\n      if (argDef && deprecationReason != null) {\r\n        const directiveDef = context.getDirective();\r\n\r\n        if (directiveDef != null) {\r\n          context.reportError(\r\n            new GraphQLError(\r\n              `Directive \"@${directiveDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\r\n              node,\r\n            ),\r\n          );\r\n        } else {\r\n          const parentType = context.getParentType();\r\n          const fieldDef = context.getFieldDef();\r\n          (parentType != null && fieldDef != null) || invariant(false);\r\n          context.reportError(\r\n            new GraphQLError(\r\n              `Field \"${parentType.name}.${fieldDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\r\n              node,\r\n            ),\r\n          );\r\n        }\r\n      }\r\n    },\r\n\r\n    ObjectField(node) {\r\n      const inputObjectDef = getNamedType(context.getParentInputType());\r\n\r\n      if (isInputObjectType(inputObjectDef)) {\r\n        const inputFieldDef = inputObjectDef.getFields()[node.name.value];\r\n        const deprecationReason =\r\n          inputFieldDef === null || inputFieldDef === void 0\r\n            ? void 0\r\n            : inputFieldDef.deprecationReason;\r\n\r\n        if (deprecationReason != null) {\r\n          context.reportError(\r\n            new GraphQLError(\r\n              `The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`,\r\n              node,\r\n            ),\r\n          );\r\n        }\r\n      }\r\n    },\r\n\r\n    EnumValue(node) {\r\n      const enumValueDef = context.getEnumValue();\r\n      const deprecationReason =\r\n        enumValueDef === null || enumValueDef === void 0\r\n          ? void 0\r\n          : enumValueDef.deprecationReason;\r\n\r\n      if (enumValueDef && deprecationReason != null) {\r\n        const enumTypeDef = getNamedType(context.getInputType());\r\n        enumTypeDef != null || invariant(false);\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `The enum value \"${enumTypeDef.name}.${enumValueDef.name}\" is deprecated. ${deprecationReason}`,\r\n            node,\r\n          ),\r\n        );\r\n      }\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}