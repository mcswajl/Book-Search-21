{"ast":null,"code":"import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n/**\r\n * Scalar leafs\r\n *\r\n * A GraphQL document is valid only if all leaf fields (fields without\r\n * sub selections) are of scalar or enum types.\r\n */\n\nexport function ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = inspect(type);\n            context.reportError(new GraphQLError(`Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`, selectionSet));\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(new GraphQLError(`Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`, node));\n        }\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/validation/rules/ScalarLeafsRule.mjs"],"names":["inspect","GraphQLError","getNamedType","isLeafType","ScalarLeafsRule","context","Field","node","type","getType","selectionSet","fieldName","name","value","typeStr","reportError"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,2BAAzC;AAEA;;;;;;;AAMA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AACvC,SAAO;AACLC,IAAAA,KAAK,CAACC,IAAD,EAAO;AACV,YAAMC,IAAI,GAAGH,OAAO,CAACI,OAAR,EAAb;AACA,YAAMC,YAAY,GAAGH,IAAI,CAACG,YAA1B;;AAEA,UAAIF,IAAJ,EAAU;AACR,YAAIL,UAAU,CAACD,YAAY,CAACM,IAAD,CAAb,CAAd,EAAoC;AAClC,cAAIE,YAAJ,EAAkB;AAChB,kBAAMC,SAAS,GAAGJ,IAAI,CAACK,IAAL,CAAUC,KAA5B;AACA,kBAAMC,OAAO,GAAGd,OAAO,CAACQ,IAAD,CAAvB;AACAH,YAAAA,OAAO,CAACU,WAAR,CACE,IAAId,YAAJ,CACG,UAASU,SAAU,2CAA0CG,OAAQ,qBADxE,EAEEJ,YAFF,CADF;AAMD;AACF,SAXD,MAWO,IAAI,CAACA,YAAL,EAAmB;AACxB,gBAAMC,SAAS,GAAGJ,IAAI,CAACK,IAAL,CAAUC,KAA5B;AACA,gBAAMC,OAAO,GAAGd,OAAO,CAACQ,IAAD,CAAvB;AACAH,UAAAA,OAAO,CAACU,WAAR,CACE,IAAId,YAAJ,CACG,UAASU,SAAU,cAAaG,OAAQ,uDAAsDH,SAAU,YAD3G,EAEEJ,IAFF,CADF;AAMD;AACF;AACF;;AA5BI,GAAP;AA8BD","sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\r\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\r\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\r\n\r\n/**\r\n * Scalar leafs\r\n *\r\n * A GraphQL document is valid only if all leaf fields (fields without\r\n * sub selections) are of scalar or enum types.\r\n */\r\nexport function ScalarLeafsRule(context) {\r\n  return {\r\n    Field(node) {\r\n      const type = context.getType();\r\n      const selectionSet = node.selectionSet;\r\n\r\n      if (type) {\r\n        if (isLeafType(getNamedType(type))) {\r\n          if (selectionSet) {\r\n            const fieldName = node.name.value;\r\n            const typeStr = inspect(type);\r\n            context.reportError(\r\n              new GraphQLError(\r\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\r\n                selectionSet,\r\n              ),\r\n            );\r\n          }\r\n        } else if (!selectionSet) {\r\n          const fieldName = node.name.value;\r\n          const typeStr = inspect(type);\r\n          context.reportError(\r\n            new GraphQLError(\r\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\r\n              node,\r\n            ),\r\n          );\r\n        }\r\n      }\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}