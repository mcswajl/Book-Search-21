{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isEnumType } from '../../type/definition.mjs';\n/**\r\n * Unique enum value names\r\n *\r\n * A GraphQL enum type is only valid if all its values are uniquely named.\r\n */\n\nexport function UniqueEnumValueNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    const typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n\n    const valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];\n    const valueNames = knownValueNames[typeName];\n\n    for (const valueDef of valueNodes) {\n      const valueName = valueDef.name.value;\n      const existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(new GraphQLError(`Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`, valueDef.name));\n      } else if (valueNames[valueName]) {\n        context.reportError(new GraphQLError(`Enum value \"${typeName}.${valueName}\" can only be defined once.`, [valueNames[valueName], valueDef.name]));\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs"],"names":["GraphQLError","isEnumType","UniqueEnumValueNamesRule","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownValueNames","EnumTypeDefinition","checkValueUniqueness","EnumTypeExtension","node","_node$values","typeName","name","value","valueNodes","values","valueNames","valueDef","valueName","existingType","getValue","reportError"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,UAAT,QAA2B,2BAA3B;AAEA;;;;;;AAKA,OAAO,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;AAChD,QAAMC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAf;AACA,QAAMC,eAAe,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAP,EAAH,GAAyBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvD;AACA,QAAMC,eAAe,GAAGF,MAAM,CAACC,MAAP,CAAc,IAAd,CAAxB;AACA,SAAO;AACLE,IAAAA,kBAAkB,EAAEC,oBADf;AAELC,IAAAA,iBAAiB,EAAED;AAFd,GAAP;;AAKA,WAASA,oBAAT,CAA8BE,IAA9B,EAAoC;AAClC,QAAIC,YAAJ;;AAEA,UAAMC,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUC,KAA3B;;AAEA,QAAI,CAACR,eAAe,CAACM,QAAD,CAApB,EAAgC;AAC9BN,MAAAA,eAAe,CAACM,QAAD,CAAf,GAA4BR,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B;AACD,KAPiC,CAOhC;;AAEF;;;AAEA,UAAMU,UAAU,GACd,CAACJ,YAAY,GAAGD,IAAI,CAACM,MAArB,MAAiC,IAAjC,IAAyCL,YAAY,KAAK,KAAK,CAA/D,GACIA,YADJ,GAEI,EAHN;AAIA,UAAMM,UAAU,GAAGX,eAAe,CAACM,QAAD,CAAlC;;AAEA,SAAK,MAAMM,QAAX,IAAuBH,UAAvB,EAAmC;AACjC,YAAMI,SAAS,GAAGD,QAAQ,CAACL,IAAT,CAAcC,KAAhC;AACA,YAAMM,YAAY,GAAGlB,eAAe,CAACU,QAAD,CAApC;;AAEA,UAAIf,UAAU,CAACuB,YAAD,CAAV,IAA4BA,YAAY,CAACC,QAAb,CAAsBF,SAAtB,CAAhC,EAAkE;AAChEpB,QAAAA,OAAO,CAACuB,WAAR,CACE,IAAI1B,YAAJ,CACG,eAAcgB,QAAS,IAAGO,SAAU,mFADvC,EAEED,QAAQ,CAACL,IAFX,CADF;AAMD,OAPD,MAOO,IAAII,UAAU,CAACE,SAAD,CAAd,EAA2B;AAChCpB,QAAAA,OAAO,CAACuB,WAAR,CACE,IAAI1B,YAAJ,CACG,eAAcgB,QAAS,IAAGO,SAAU,6BADvC,EAEE,CAACF,UAAU,CAACE,SAAD,CAAX,EAAwBD,QAAQ,CAACL,IAAjC,CAFF,CADF;AAMD,OAPM,MAOA;AACLI,QAAAA,UAAU,CAACE,SAAD,CAAV,GAAwBD,QAAQ,CAACL,IAAjC;AACD;AACF;;AAED,WAAO,KAAP;AACD;AACF","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\r\nimport { isEnumType } from '../../type/definition.mjs';\r\n\r\n/**\r\n * Unique enum value names\r\n *\r\n * A GraphQL enum type is only valid if all its values are uniquely named.\r\n */\r\nexport function UniqueEnumValueNamesRule(context) {\r\n  const schema = context.getSchema();\r\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\r\n  const knownValueNames = Object.create(null);\r\n  return {\r\n    EnumTypeDefinition: checkValueUniqueness,\r\n    EnumTypeExtension: checkValueUniqueness,\r\n  };\r\n\r\n  function checkValueUniqueness(node) {\r\n    var _node$values;\r\n\r\n    const typeName = node.name.value;\r\n\r\n    if (!knownValueNames[typeName]) {\r\n      knownValueNames[typeName] = Object.create(null);\r\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\r\n\r\n    /* c8 ignore next */\r\n\r\n    const valueNodes =\r\n      (_node$values = node.values) !== null && _node$values !== void 0\r\n        ? _node$values\r\n        : [];\r\n    const valueNames = knownValueNames[typeName];\r\n\r\n    for (const valueDef of valueNodes) {\r\n      const valueName = valueDef.name.value;\r\n      const existingType = existingTypeMap[typeName];\r\n\r\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`,\r\n            valueDef.name,\r\n          ),\r\n        );\r\n      } else if (valueNames[valueName]) {\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Enum value \"${typeName}.${valueName}\" can only be defined once.`,\r\n            [valueNames[valueName], valueDef.name],\r\n          ),\r\n        );\r\n      } else {\r\n        valueNames[valueName] = valueDef.name;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}