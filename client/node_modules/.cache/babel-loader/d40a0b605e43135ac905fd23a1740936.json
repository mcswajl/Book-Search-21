{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\r\n * No fragment cycles\r\n *\r\n * The graph of fragment spreads must not form any cycles including spreading itself.\r\n * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles\r\n */\n\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  const spreadPath = []; // Position in the spread path\n\n  const spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    }\n\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    const fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (const spreadNode of spreadNodes) {\n      const spreadName = spreadNode.name.value;\n      const cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        const spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        const cyclePath = spreadPath.slice(cycleIndex);\n        const viaPath = cyclePath.slice(0, -1).map(s => '\"' + s.name.value + '\"').join(', ');\n        context.reportError(new GraphQLError(`Cannot spread fragment \"${spreadName}\" within itself` + (viaPath !== '' ? ` via ${viaPath}.` : '.'), cyclePath));\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs"],"names":["GraphQLError","NoFragmentCyclesRule","context","visitedFrags","Object","create","spreadPath","spreadPathIndexByName","OperationDefinition","FragmentDefinition","node","detectCycleRecursive","fragment","name","value","fragmentName","spreadNodes","getFragmentSpreads","selectionSet","length","spreadNode","spreadName","cycleIndex","push","undefined","spreadFragment","getFragment","cyclePath","slice","viaPath","map","s","join","reportError","pop"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;;;;;;;;;AAQA,OAAO,SAASC,oBAAT,CAA8BC,OAA9B,EAAuC;AAC5C;AACA;AACA,QAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAArB,CAH4C,CAGF;;AAE1C,QAAMC,UAAU,GAAG,EAAnB,CAL4C,CAKrB;;AAEvB,QAAMC,qBAAqB,GAAGH,MAAM,CAACC,MAAP,CAAc,IAAd,CAA9B;AACA,SAAO;AACLG,IAAAA,mBAAmB,EAAE,MAAM,KADtB;;AAGLC,IAAAA,kBAAkB,CAACC,IAAD,EAAO;AACvBC,MAAAA,oBAAoB,CAACD,IAAD,CAApB;AACA,aAAO,KAAP;AACD;;AANI,GAAP,CAR4C,CAezC;AACH;AACA;;AAEA,WAASC,oBAAT,CAA8BC,QAA9B,EAAwC;AACtC,QAAIT,YAAY,CAACS,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAhB,EAAuC;AACrC;AACD;;AAED,UAAMC,YAAY,GAAGH,QAAQ,CAACC,IAAT,CAAcC,KAAnC;AACAX,IAAAA,YAAY,CAACY,YAAD,CAAZ,GAA6B,IAA7B;AACA,UAAMC,WAAW,GAAGd,OAAO,CAACe,kBAAR,CAA2BL,QAAQ,CAACM,YAApC,CAApB;;AAEA,QAAIF,WAAW,CAACG,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B;AACD;;AAEDZ,IAAAA,qBAAqB,CAACQ,YAAD,CAArB,GAAsCT,UAAU,CAACa,MAAjD;;AAEA,SAAK,MAAMC,UAAX,IAAyBJ,WAAzB,EAAsC;AACpC,YAAMK,UAAU,GAAGD,UAAU,CAACP,IAAX,CAAgBC,KAAnC;AACA,YAAMQ,UAAU,GAAGf,qBAAqB,CAACc,UAAD,CAAxC;AACAf,MAAAA,UAAU,CAACiB,IAAX,CAAgBH,UAAhB;;AAEA,UAAIE,UAAU,KAAKE,SAAnB,EAA8B;AAC5B,cAAMC,cAAc,GAAGvB,OAAO,CAACwB,WAAR,CAAoBL,UAApB,CAAvB;;AAEA,YAAII,cAAJ,EAAoB;AAClBd,UAAAA,oBAAoB,CAACc,cAAD,CAApB;AACD;AACF,OAND,MAMO;AACL,cAAME,SAAS,GAAGrB,UAAU,CAACsB,KAAX,CAAiBN,UAAjB,CAAlB;AACA,cAAMO,OAAO,GAAGF,SAAS,CACtBC,KADa,CACP,CADO,EACJ,CAAC,CADG,EAEbE,GAFa,CAERC,CAAD,IAAO,MAAMA,CAAC,CAAClB,IAAF,CAAOC,KAAb,GAAqB,GAFnB,EAGbkB,IAHa,CAGR,IAHQ,CAAhB;AAIA9B,QAAAA,OAAO,CAAC+B,WAAR,CACE,IAAIjC,YAAJ,CACG,2BAA0BqB,UAAW,iBAAtC,IACGQ,OAAO,KAAK,EAAZ,GAAkB,QAAOA,OAAQ,GAAjC,GAAsC,GADzC,CADF,EAGEF,SAHF,CADF;AAOD;;AAEDrB,MAAAA,UAAU,CAAC4B,GAAX;AACD;;AAED3B,IAAAA,qBAAqB,CAACQ,YAAD,CAArB,GAAsCS,SAAtC;AACD;AACF","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\r\n\r\n/**\r\n * No fragment cycles\r\n *\r\n * The graph of fragment spreads must not form any cycles including spreading itself.\r\n * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.\r\n *\r\n * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles\r\n */\r\nexport function NoFragmentCyclesRule(context) {\r\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\r\n  // are not redundantly reported.\r\n  const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\r\n\r\n  const spreadPath = []; // Position in the spread path\r\n\r\n  const spreadPathIndexByName = Object.create(null);\r\n  return {\r\n    OperationDefinition: () => false,\r\n\r\n    FragmentDefinition(node) {\r\n      detectCycleRecursive(node);\r\n      return false;\r\n    },\r\n  }; // This does a straight-forward DFS to find cycles.\r\n  // It does not terminate when a cycle was found but continues to explore\r\n  // the graph to find all possible cycles.\r\n\r\n  function detectCycleRecursive(fragment) {\r\n    if (visitedFrags[fragment.name.value]) {\r\n      return;\r\n    }\r\n\r\n    const fragmentName = fragment.name.value;\r\n    visitedFrags[fragmentName] = true;\r\n    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\r\n\r\n    if (spreadNodes.length === 0) {\r\n      return;\r\n    }\r\n\r\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\r\n\r\n    for (const spreadNode of spreadNodes) {\r\n      const spreadName = spreadNode.name.value;\r\n      const cycleIndex = spreadPathIndexByName[spreadName];\r\n      spreadPath.push(spreadNode);\r\n\r\n      if (cycleIndex === undefined) {\r\n        const spreadFragment = context.getFragment(spreadName);\r\n\r\n        if (spreadFragment) {\r\n          detectCycleRecursive(spreadFragment);\r\n        }\r\n      } else {\r\n        const cyclePath = spreadPath.slice(cycleIndex);\r\n        const viaPath = cyclePath\r\n          .slice(0, -1)\r\n          .map((s) => '\"' + s.name.value + '\"')\r\n          .join(', ');\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Cannot spread fragment \"${spreadName}\" within itself` +\r\n              (viaPath !== '' ? ` via ${viaPath}.` : '.'),\r\n            cyclePath,\r\n          ),\r\n        );\r\n      }\r\n\r\n      spreadPath.pop();\r\n    }\r\n\r\n    spreadPathIndexByName[fragmentName] = undefined;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}