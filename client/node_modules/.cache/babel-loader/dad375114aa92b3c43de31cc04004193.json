{"ast":null,"code":"import { keyMap } from '../jsutils/keyMap.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { isLeafType, isInputObjectType, isListType, isNonNullType } from '../type/definition.mjs';\n/**\r\n * Produces a JavaScript value given a GraphQL Value AST.\r\n *\r\n * A GraphQL type must be provided, which will be used to interpret different\r\n * GraphQL Value literals.\r\n *\r\n * Returns `undefined` when the value could not be validly coerced according to\r\n * the provided type.\r\n *\r\n * | GraphQL Value        | JSON Value    |\r\n * | -------------------- | ------------- |\r\n * | Input Object         | Object        |\r\n * | List                 | Array         |\r\n * | Boolean              | Boolean       |\r\n * | String               | String        |\r\n * | Int / Float          | Number        |\r\n * | Enum Value           | Unknown       |\r\n * | NullValue            | null          |\r\n *\r\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    const variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      const coercedValues = [];\n\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedObj = Object.create(null);\n    const fieldNodes = keyMap(valueNode.fields, field => field.name.value);\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/utilities/valueFromAST.mjs"],"names":["keyMap","inspect","invariant","Kind","isLeafType","isInputObjectType","isListType","isNonNullType","valueFromAST","valueNode","type","variables","kind","VARIABLE","variableName","name","value","undefined","variableValue","NULL","ofType","itemType","LIST","coercedValues","itemNode","values","isMissingVariable","push","itemValue","coercedValue","OBJECT","coercedObj","Object","create","fieldNodes","fields","field","getFields","fieldNode","defaultValue","fieldValue","result","parseLiteral","_error"],"mappings":"AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SACEC,UADF,EAEEC,iBAFF,EAGEC,UAHF,EAIEC,aAJF,QAKO,wBALP;AAOA;;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,IAAjC,EAAuCC,SAAvC,EAAkD;AACvD,MAAI,CAACF,SAAL,EAAgB;AACd;AACA;AACA;AACD;;AAED,MAAIA,SAAS,CAACG,IAAV,KAAmBT,IAAI,CAACU,QAA5B,EAAsC;AACpC,UAAMC,YAAY,GAAGL,SAAS,CAACM,IAAV,CAAeC,KAApC;;AAEA,QAAIL,SAAS,IAAI,IAAb,IAAqBA,SAAS,CAACG,YAAD,CAAT,KAA4BG,SAArD,EAAgE;AAC9D;AACA;AACD;;AAED,UAAMC,aAAa,GAAGP,SAAS,CAACG,YAAD,CAA/B;;AAEA,QAAII,aAAa,KAAK,IAAlB,IAA0BX,aAAa,CAACG,IAAD,CAA3C,EAAmD;AACjD,aADiD,CACzC;AACT,KAZmC,CAYlC;AACF;AACA;;;AAEA,WAAOQ,aAAP;AACD;;AAED,MAAIX,aAAa,CAACG,IAAD,CAAjB,EAAyB;AACvB,QAAID,SAAS,CAACG,IAAV,KAAmBT,IAAI,CAACgB,IAA5B,EAAkC;AAChC,aADgC,CACxB;AACT;;AAED,WAAOX,YAAY,CAACC,SAAD,EAAYC,IAAI,CAACU,MAAjB,EAAyBT,SAAzB,CAAnB;AACD;;AAED,MAAIF,SAAS,CAACG,IAAV,KAAmBT,IAAI,CAACgB,IAA5B,EAAkC;AAChC;AACA,WAAO,IAAP;AACD;;AAED,MAAIb,UAAU,CAACI,IAAD,CAAd,EAAsB;AACpB,UAAMW,QAAQ,GAAGX,IAAI,CAACU,MAAtB;;AAEA,QAAIX,SAAS,CAACG,IAAV,KAAmBT,IAAI,CAACmB,IAA5B,EAAkC;AAChC,YAAMC,aAAa,GAAG,EAAtB;;AAEA,WAAK,MAAMC,QAAX,IAAuBf,SAAS,CAACgB,MAAjC,EAAyC;AACvC,YAAIC,iBAAiB,CAACF,QAAD,EAAWb,SAAX,CAArB,EAA4C;AAC1C;AACA;AACA,cAAIJ,aAAa,CAACc,QAAD,CAAjB,EAA6B;AAC3B,mBAD2B,CACnB;AACT;;AAEDE,UAAAA,aAAa,CAACI,IAAd,CAAmB,IAAnB;AACD,SARD,MAQO;AACL,gBAAMC,SAAS,GAAGpB,YAAY,CAACgB,QAAD,EAAWH,QAAX,EAAqBV,SAArB,CAA9B;;AAEA,cAAIiB,SAAS,KAAKX,SAAlB,EAA6B;AAC3B,mBAD2B,CACnB;AACT;;AAEDM,UAAAA,aAAa,CAACI,IAAd,CAAmBC,SAAnB;AACD;AACF;;AAED,aAAOL,aAAP;AACD;;AAED,UAAMM,YAAY,GAAGrB,YAAY,CAACC,SAAD,EAAYY,QAAZ,EAAsBV,SAAtB,CAAjC;;AAEA,QAAIkB,YAAY,KAAKZ,SAArB,EAAgC;AAC9B,aAD8B,CACtB;AACT;;AAED,WAAO,CAACY,YAAD,CAAP;AACD;;AAED,MAAIxB,iBAAiB,CAACK,IAAD,CAArB,EAA6B;AAC3B,QAAID,SAAS,CAACG,IAAV,KAAmBT,IAAI,CAAC2B,MAA5B,EAAoC;AAClC,aADkC,CAC1B;AACT;;AAED,UAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAnB;AACA,UAAMC,UAAU,GAAGlC,MAAM,CAACS,SAAS,CAAC0B,MAAX,EAAoBC,KAAD,IAAWA,KAAK,CAACrB,IAAN,CAAWC,KAAzC,CAAzB;;AAEA,SAAK,MAAMoB,KAAX,IAAoBJ,MAAM,CAACP,MAAP,CAAcf,IAAI,CAAC2B,SAAL,EAAd,CAApB,EAAqD;AACnD,YAAMC,SAAS,GAAGJ,UAAU,CAACE,KAAK,CAACrB,IAAP,CAA5B;;AAEA,UAAI,CAACuB,SAAD,IAAcZ,iBAAiB,CAACY,SAAS,CAACtB,KAAX,EAAkBL,SAAlB,CAAnC,EAAiE;AAC/D,YAAIyB,KAAK,CAACG,YAAN,KAAuBtB,SAA3B,EAAsC;AACpCc,UAAAA,UAAU,CAACK,KAAK,CAACrB,IAAP,CAAV,GAAyBqB,KAAK,CAACG,YAA/B;AACD,SAFD,MAEO,IAAIhC,aAAa,CAAC6B,KAAK,CAAC1B,IAAP,CAAjB,EAA+B;AACpC,iBADoC,CAC5B;AACT;;AAED;AACD;;AAED,YAAM8B,UAAU,GAAGhC,YAAY,CAAC8B,SAAS,CAACtB,KAAX,EAAkBoB,KAAK,CAAC1B,IAAxB,EAA8BC,SAA9B,CAA/B;;AAEA,UAAI6B,UAAU,KAAKvB,SAAnB,EAA8B;AAC5B,eAD4B,CACpB;AACT;;AAEDc,MAAAA,UAAU,CAACK,KAAK,CAACrB,IAAP,CAAV,GAAyByB,UAAzB;AACD;;AAED,WAAOT,UAAP;AACD;;AAED,MAAI3B,UAAU,CAACM,IAAD,CAAd,EAAsB;AACpB;AACA;AACA;AACA,QAAI+B,MAAJ;;AAEA,QAAI;AACFA,MAAAA,MAAM,GAAG/B,IAAI,CAACgC,YAAL,CAAkBjC,SAAlB,EAA6BE,SAA7B,CAAT;AACD,KAFD,CAEE,OAAOgC,MAAP,EAAe;AACf,aADe,CACP;AACT;;AAED,QAAIF,MAAM,KAAKxB,SAAf,EAA0B;AACxB,aADwB,CAChB;AACT;;AAED,WAAOwB,MAAP;AACD;AACD;AACA;;;AAEA,WAASvC,SAAS,CAAC,KAAD,EAAQ,4BAA4BD,OAAO,CAACS,IAAD,CAA3C,CAAlB;AACD,C,CAAC;AACF;;AAEA,SAASgB,iBAAT,CAA2BjB,SAA3B,EAAsCE,SAAtC,EAAiD;AAC/C,SACEF,SAAS,CAACG,IAAV,KAAmBT,IAAI,CAACU,QAAxB,KACCF,SAAS,IAAI,IAAb,IAAqBA,SAAS,CAACF,SAAS,CAACM,IAAV,CAAeC,KAAhB,CAAT,KAAoCC,SAD1D,CADF;AAID","sourcesContent":["import { keyMap } from '../jsutils/keyMap.mjs';\r\nimport { inspect } from '../jsutils/inspect.mjs';\r\nimport { invariant } from '../jsutils/invariant.mjs';\r\nimport { Kind } from '../language/kinds.mjs';\r\nimport {\r\n  isLeafType,\r\n  isInputObjectType,\r\n  isListType,\r\n  isNonNullType,\r\n} from '../type/definition.mjs';\r\n\r\n/**\r\n * Produces a JavaScript value given a GraphQL Value AST.\r\n *\r\n * A GraphQL type must be provided, which will be used to interpret different\r\n * GraphQL Value literals.\r\n *\r\n * Returns `undefined` when the value could not be validly coerced according to\r\n * the provided type.\r\n *\r\n * | GraphQL Value        | JSON Value    |\r\n * | -------------------- | ------------- |\r\n * | Input Object         | Object        |\r\n * | List                 | Array         |\r\n * | Boolean              | Boolean       |\r\n * | String               | String        |\r\n * | Int / Float          | Number        |\r\n * | Enum Value           | Unknown       |\r\n * | NullValue            | null          |\r\n *\r\n */\r\nexport function valueFromAST(valueNode, type, variables) {\r\n  if (!valueNode) {\r\n    // When there is no node, then there is also no value.\r\n    // Importantly, this is different from returning the value null.\r\n    return;\r\n  }\r\n\r\n  if (valueNode.kind === Kind.VARIABLE) {\r\n    const variableName = valueNode.name.value;\r\n\r\n    if (variables == null || variables[variableName] === undefined) {\r\n      // No valid return value.\r\n      return;\r\n    }\r\n\r\n    const variableValue = variables[variableName];\r\n\r\n    if (variableValue === null && isNonNullType(type)) {\r\n      return; // Invalid: intentionally return no value.\r\n    } // Note: This does no further checking that this variable is correct.\r\n    // This assumes that this query has been validated and the variable\r\n    // usage here is of the correct type.\r\n\r\n    return variableValue;\r\n  }\r\n\r\n  if (isNonNullType(type)) {\r\n    if (valueNode.kind === Kind.NULL) {\r\n      return; // Invalid: intentionally return no value.\r\n    }\r\n\r\n    return valueFromAST(valueNode, type.ofType, variables);\r\n  }\r\n\r\n  if (valueNode.kind === Kind.NULL) {\r\n    // This is explicitly returning the value null.\r\n    return null;\r\n  }\r\n\r\n  if (isListType(type)) {\r\n    const itemType = type.ofType;\r\n\r\n    if (valueNode.kind === Kind.LIST) {\r\n      const coercedValues = [];\r\n\r\n      for (const itemNode of valueNode.values) {\r\n        if (isMissingVariable(itemNode, variables)) {\r\n          // If an array contains a missing variable, it is either coerced to\r\n          // null or if the item type is non-null, it considered invalid.\r\n          if (isNonNullType(itemType)) {\r\n            return; // Invalid: intentionally return no value.\r\n          }\r\n\r\n          coercedValues.push(null);\r\n        } else {\r\n          const itemValue = valueFromAST(itemNode, itemType, variables);\r\n\r\n          if (itemValue === undefined) {\r\n            return; // Invalid: intentionally return no value.\r\n          }\r\n\r\n          coercedValues.push(itemValue);\r\n        }\r\n      }\r\n\r\n      return coercedValues;\r\n    }\r\n\r\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\r\n\r\n    if (coercedValue === undefined) {\r\n      return; // Invalid: intentionally return no value.\r\n    }\r\n\r\n    return [coercedValue];\r\n  }\r\n\r\n  if (isInputObjectType(type)) {\r\n    if (valueNode.kind !== Kind.OBJECT) {\r\n      return; // Invalid: intentionally return no value.\r\n    }\r\n\r\n    const coercedObj = Object.create(null);\r\n    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);\r\n\r\n    for (const field of Object.values(type.getFields())) {\r\n      const fieldNode = fieldNodes[field.name];\r\n\r\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\r\n        if (field.defaultValue !== undefined) {\r\n          coercedObj[field.name] = field.defaultValue;\r\n        } else if (isNonNullType(field.type)) {\r\n          return; // Invalid: intentionally return no value.\r\n        }\r\n\r\n        continue;\r\n      }\r\n\r\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\r\n\r\n      if (fieldValue === undefined) {\r\n        return; // Invalid: intentionally return no value.\r\n      }\r\n\r\n      coercedObj[field.name] = fieldValue;\r\n    }\r\n\r\n    return coercedObj;\r\n  }\r\n\r\n  if (isLeafType(type)) {\r\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\r\n    // Invalid values represent a failure to parse correctly, in which case\r\n    // no value is returned.\r\n    let result;\r\n\r\n    try {\r\n      result = type.parseLiteral(valueNode, variables);\r\n    } catch (_error) {\r\n      return; // Invalid: intentionally return no value.\r\n    }\r\n\r\n    if (result === undefined) {\r\n      return; // Invalid: intentionally return no value.\r\n    }\r\n\r\n    return result;\r\n  }\r\n  /* c8 ignore next 3 */\r\n  // Not reachable, all possible input types have been considered.\r\n\r\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\r\n} // Returns true if the provided valueNode is a variable which is not defined\r\n// in the set of variables.\r\n\r\nfunction isMissingVariable(valueNode, variables) {\r\n  return (\r\n    valueNode.kind === Kind.VARIABLE &&\r\n    (variables == null || variables[valueNode.name.value] === undefined)\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}