{"ast":null,"code":"import { inspect } from '../jsutils/inspect.mjs';\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n/**\r\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\r\n * optional, but they are useful for clients who store GraphQL documents in source files.\r\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\r\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\r\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\r\n */\n\nexport class Source {\n  constructor(body, name = 'GraphQL request', locationOffset = {\n    line: 1,\n    column: 1\n  }) {\n    typeof body === 'string' || devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 || devAssert(false, 'line in locationOffset is 1-indexed and must be positive.');\n    this.locationOffset.column > 0 || devAssert(false, 'column in locationOffset is 1-indexed and must be positive.');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n\n}\n/**\r\n * Test if the given value is a Source object.\r\n *\r\n * @internal\r\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/language/source.mjs"],"names":["inspect","devAssert","instanceOf","Source","constructor","body","name","locationOffset","line","column","Symbol","toStringTag","isSource","source"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,UAAT,QAA2B,2BAA3B;AAEA;;;;;;;;AAOA,OAAO,MAAMC,MAAN,CAAa;AAClBC,EAAAA,WAAW,CACTC,IADS,EAETC,IAAI,GAAG,iBAFE,EAGTC,cAAc,GAAG;AACfC,IAAAA,IAAI,EAAE,CADS;AAEfC,IAAAA,MAAM,EAAE;AAFO,GAHR,EAOT;AACA,WAAOJ,IAAP,KAAgB,QAAhB,IACEJ,SAAS,CAAC,KAAD,EAAS,oCAAmCD,OAAO,CAACK,IAAD,CAAO,GAA1D,CADX;AAEA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKA,cAAL,CAAoBC,IAApB,GAA2B,CAA3B,IACEP,SAAS,CACP,KADO,EAEP,2DAFO,CADX;AAKA,SAAKM,cAAL,CAAoBE,MAApB,GAA6B,CAA7B,IACER,SAAS,CACP,KADO,EAEP,6DAFO,CADX;AAKD;;AAED,OAAKS,MAAM,CAACC,WAAZ,IAA2B;AACzB,WAAO,QAAP;AACD;;AA5BiB;AA8BpB;;;;;;AAMA,OAAO,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;AAC/B,SAAOX,UAAU,CAACW,MAAD,EAASV,MAAT,CAAjB;AACD","sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\r\nimport { devAssert } from '../jsutils/devAssert.mjs';\r\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\r\n\r\n/**\r\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\r\n * optional, but they are useful for clients who store GraphQL documents in source files.\r\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\r\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\r\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\r\n */\r\nexport class Source {\r\n  constructor(\r\n    body,\r\n    name = 'GraphQL request',\r\n    locationOffset = {\r\n      line: 1,\r\n      column: 1,\r\n    },\r\n  ) {\r\n    typeof body === 'string' ||\r\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\r\n    this.body = body;\r\n    this.name = name;\r\n    this.locationOffset = locationOffset;\r\n    this.locationOffset.line > 0 ||\r\n      devAssert(\r\n        false,\r\n        'line in locationOffset is 1-indexed and must be positive.',\r\n      );\r\n    this.locationOffset.column > 0 ||\r\n      devAssert(\r\n        false,\r\n        'column in locationOffset is 1-indexed and must be positive.',\r\n      );\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return 'Source';\r\n  }\r\n}\r\n/**\r\n * Test if the given value is a Source object.\r\n *\r\n * @internal\r\n */\r\n\r\nexport function isSource(source) {\r\n  return instanceOf(source, Source);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}