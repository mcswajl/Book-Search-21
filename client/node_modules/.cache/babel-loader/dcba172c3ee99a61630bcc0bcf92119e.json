{"ast":null,"code":"const MAX_SUGGESTIONS = 5;\n/**\r\n * Given [ A, B, C ] return ' Did you mean A, B, or C?'.\r\n */\n\nexport function didYouMean(firstArg, secondArg) {\n  const [subMessage, suggestionsArg] = secondArg ? [firstArg, secondArg] : [undefined, firstArg];\n  let message = ' Did you mean ';\n\n  if (subMessage) {\n    message += subMessage + ' ';\n  }\n\n  const suggestions = suggestionsArg.map(x => `\"${x}\"`);\n\n  switch (suggestions.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return message + suggestions[0] + '?';\n\n    case 2:\n      return message + suggestions[0] + ' or ' + suggestions[1] + '?';\n  }\n\n  const selected = suggestions.slice(0, MAX_SUGGESTIONS);\n  const lastItem = selected.pop();\n  return message + selected.join(', ') + ', or ' + lastItem + '?';\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/jsutils/didYouMean.mjs"],"names":["MAX_SUGGESTIONS","didYouMean","firstArg","secondArg","subMessage","suggestionsArg","undefined","message","suggestions","map","x","length","selected","slice","lastItem","pop","join"],"mappings":"AAAA,MAAMA,eAAe,GAAG,CAAxB;AACA;;;;AAIA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,SAA9B,EAAyC;AAC9C,QAAM,CAACC,UAAD,EAAaC,cAAb,IAA+BF,SAAS,GAC1C,CAACD,QAAD,EAAWC,SAAX,CAD0C,GAE1C,CAACG,SAAD,EAAYJ,QAAZ,CAFJ;AAGA,MAAIK,OAAO,GAAG,gBAAd;;AAEA,MAAIH,UAAJ,EAAgB;AACdG,IAAAA,OAAO,IAAIH,UAAU,GAAG,GAAxB;AACD;;AAED,QAAMI,WAAW,GAAGH,cAAc,CAACI,GAAf,CAAoBC,CAAD,IAAQ,IAAGA,CAAE,GAAhC,CAApB;;AAEA,UAAQF,WAAW,CAACG,MAApB;AACE,SAAK,CAAL;AACE,aAAO,EAAP;;AAEF,SAAK,CAAL;AACE,aAAOJ,OAAO,GAAGC,WAAW,CAAC,CAAD,CAArB,GAA2B,GAAlC;;AAEF,SAAK,CAAL;AACE,aAAOD,OAAO,GAAGC,WAAW,CAAC,CAAD,CAArB,GAA2B,MAA3B,GAAoCA,WAAW,CAAC,CAAD,CAA/C,GAAqD,GAA5D;AARJ;;AAWA,QAAMI,QAAQ,GAAGJ,WAAW,CAACK,KAAZ,CAAkB,CAAlB,EAAqBb,eAArB,CAAjB;AACA,QAAMc,QAAQ,GAAGF,QAAQ,CAACG,GAAT,EAAjB;AACA,SAAOR,OAAO,GAAGK,QAAQ,CAACI,IAAT,CAAc,IAAd,CAAV,GAAgC,OAAhC,GAA0CF,QAA1C,GAAqD,GAA5D;AACD","sourcesContent":["const MAX_SUGGESTIONS = 5;\r\n/**\r\n * Given [ A, B, C ] return ' Did you mean A, B, or C?'.\r\n */\r\n\r\nexport function didYouMean(firstArg, secondArg) {\r\n  const [subMessage, suggestionsArg] = secondArg\r\n    ? [firstArg, secondArg]\r\n    : [undefined, firstArg];\r\n  let message = ' Did you mean ';\r\n\r\n  if (subMessage) {\r\n    message += subMessage + ' ';\r\n  }\r\n\r\n  const suggestions = suggestionsArg.map((x) => `\"${x}\"`);\r\n\r\n  switch (suggestions.length) {\r\n    case 0:\r\n      return '';\r\n\r\n    case 1:\r\n      return message + suggestions[0] + '?';\r\n\r\n    case 2:\r\n      return message + suggestions[0] + ' or ' + suggestions[1] + '?';\r\n  }\r\n\r\n  const selected = suggestions.slice(0, MAX_SUGGESTIONS);\r\n  const lastItem = selected.pop();\r\n  return message + selected.join(', ') + ', or ' + lastItem + '?';\r\n}\r\n"]},"metadata":{},"sourceType":"module"}