{"ast":null,"code":"import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\r\n * Unique argument definition names\r\n *\r\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\r\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\r\n */\n\nexport function UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n\n      const argumentNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes = (_typeNode$fields = typeNode.fields) !== null && _typeNode$fields !== void 0 ? _typeNode$fields : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes = (_fieldDef$arguments = fieldDef.arguments) !== null && _fieldDef$arguments !== void 0 ? _fieldDef$arguments : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = groupBy(argumentNodes, arg => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(new GraphQLError(`Argument \"${parentName}(${argName}:)\" can only be defined once.`, argNodes.map(node => node.name)));\n      }\n    }\n\n    return false;\n  }\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs"],"names":["groupBy","GraphQLError","UniqueArgumentDefinitionNamesRule","context","DirectiveDefinition","directiveNode","_directiveNode$argume","argumentNodes","arguments","checkArgUniqueness","name","value","InterfaceTypeDefinition","checkArgUniquenessPerField","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","typeNode","_typeNode$fields","typeName","fieldNodes","fields","fieldDef","_fieldDef$arguments","fieldName","parentName","seenArgs","arg","argName","argNodes","length","reportError","map","node"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AAEA;;;;;;;AAMA,OAAO,SAASC,iCAAT,CAA2CC,OAA3C,EAAoD;AACzD,SAAO;AACLC,IAAAA,mBAAmB,CAACC,aAAD,EAAgB;AACjC,UAAIC,qBAAJ,CADiC,CAGjC;;AAEA;;;AACA,YAAMC,aAAa,GACjB,CAACD,qBAAqB,GAAGD,aAAa,CAACG,SAAvC,MAAsD,IAAtD,IACAF,qBAAqB,KAAK,KAAK,CAD/B,GAEIA,qBAFJ,GAGI,EAJN;AAKA,aAAOG,kBAAkB,CAAE,IAAGJ,aAAa,CAACK,IAAd,CAAmBC,KAAM,EAA9B,EAAiCJ,aAAjC,CAAzB;AACD,KAbI;;AAeLK,IAAAA,uBAAuB,EAAEC,0BAfpB;AAgBLC,IAAAA,sBAAsB,EAAED,0BAhBnB;AAiBLE,IAAAA,oBAAoB,EAAEF,0BAjBjB;AAkBLG,IAAAA,mBAAmB,EAAEH;AAlBhB,GAAP;;AAqBA,WAASA,0BAAT,CAAoCI,QAApC,EAA8C;AAC5C,QAAIC,gBAAJ;;AAEA,UAAMC,QAAQ,GAAGF,QAAQ,CAACP,IAAT,CAAcC,KAA/B,CAH4C,CAGN;;AAEtC;;AAEA,UAAMS,UAAU,GACd,CAACF,gBAAgB,GAAGD,QAAQ,CAACI,MAA7B,MAAyC,IAAzC,IACAH,gBAAgB,KAAK,KAAK,CAD1B,GAEIA,gBAFJ,GAGI,EAJN;;AAMA,SAAK,MAAMI,QAAX,IAAuBF,UAAvB,EAAmC;AACjC,UAAIG,mBAAJ;;AAEA,YAAMC,SAAS,GAAGF,QAAQ,CAACZ,IAAT,CAAcC,KAAhC,CAHiC,CAGM;;AAEvC;;AAEA,YAAMJ,aAAa,GACjB,CAACgB,mBAAmB,GAAGD,QAAQ,CAACd,SAAhC,MAA+C,IAA/C,IACAe,mBAAmB,KAAK,KAAK,CAD7B,GAEIA,mBAFJ,GAGI,EAJN;AAKAd,MAAAA,kBAAkB,CAAE,GAAEU,QAAS,IAAGK,SAAU,EAA1B,EAA6BjB,aAA7B,CAAlB;AACD;;AAED,WAAO,KAAP;AACD;;AAED,WAASE,kBAAT,CAA4BgB,UAA5B,EAAwClB,aAAxC,EAAuD;AACrD,UAAMmB,QAAQ,GAAG1B,OAAO,CAACO,aAAD,EAAiBoB,GAAD,IAASA,GAAG,CAACjB,IAAJ,CAASC,KAAlC,CAAxB;;AAEA,SAAK,MAAM,CAACiB,OAAD,EAAUC,QAAV,CAAX,IAAkCH,QAAlC,EAA4C;AAC1C,UAAIG,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvB3B,QAAAA,OAAO,CAAC4B,WAAR,CACE,IAAI9B,YAAJ,CACG,aAAYwB,UAAW,IAAGG,OAAQ,+BADrC,EAEEC,QAAQ,CAACG,GAAT,CAAcC,IAAD,IAAUA,IAAI,CAACvB,IAA5B,CAFF,CADF;AAMD;AACF;;AAED,WAAO,KAAP;AACD;AACF","sourcesContent":["import { groupBy } from '../../jsutils/groupBy.mjs';\r\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\r\n\r\n/**\r\n * Unique argument definition names\r\n *\r\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\r\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\r\n */\r\nexport function UniqueArgumentDefinitionNamesRule(context) {\r\n  return {\r\n    DirectiveDefinition(directiveNode) {\r\n      var _directiveNode$argume;\r\n\r\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\r\n\r\n      /* c8 ignore next */\r\n      const argumentNodes =\r\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\r\n        _directiveNode$argume !== void 0\r\n          ? _directiveNode$argume\r\n          : [];\r\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\r\n    },\r\n\r\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\r\n    InterfaceTypeExtension: checkArgUniquenessPerField,\r\n    ObjectTypeDefinition: checkArgUniquenessPerField,\r\n    ObjectTypeExtension: checkArgUniquenessPerField,\r\n  };\r\n\r\n  function checkArgUniquenessPerField(typeNode) {\r\n    var _typeNode$fields;\r\n\r\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\r\n\r\n    /* c8 ignore next */\r\n\r\n    const fieldNodes =\r\n      (_typeNode$fields = typeNode.fields) !== null &&\r\n      _typeNode$fields !== void 0\r\n        ? _typeNode$fields\r\n        : [];\r\n\r\n    for (const fieldDef of fieldNodes) {\r\n      var _fieldDef$arguments;\r\n\r\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\r\n\r\n      /* c8 ignore next */\r\n\r\n      const argumentNodes =\r\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\r\n        _fieldDef$arguments !== void 0\r\n          ? _fieldDef$arguments\r\n          : [];\r\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function checkArgUniqueness(parentName, argumentNodes) {\r\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\r\n\r\n    for (const [argName, argNodes] of seenArgs) {\r\n      if (argNodes.length > 1) {\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\r\n            argNodes.map((node) => node.name),\r\n          ),\r\n        );\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}