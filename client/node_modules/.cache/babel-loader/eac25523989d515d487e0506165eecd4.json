{"ast":null,"code":"import { toError } from '../jsutils/toError.mjs';\nimport { GraphQLError } from './GraphQLError.mjs';\n/**\r\n * Given an arbitrary value, presumably thrown while attempting to execute a\r\n * GraphQL operation, produce a new GraphQLError aware of the location in the\r\n * document responsible for the original Error.\r\n */\n\nexport function locatedError(rawOriginalError, nodes, path) {\n  var _nodes;\n\n  const originalError = toError(rawOriginalError); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (isLocatedGraphQLError(originalError)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes, originalError.source, originalError.positions, path, originalError);\n}\n\nfunction isLocatedGraphQLError(error) {\n  return Array.isArray(error.path);\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/error/locatedError.mjs"],"names":["toError","GraphQLError","locatedError","rawOriginalError","nodes","path","_nodes","originalError","isLocatedGraphQLError","message","source","positions","error","Array","isArray"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA;;;;;;AAMA,OAAO,SAASC,YAAT,CAAsBC,gBAAtB,EAAwCC,KAAxC,EAA+CC,IAA/C,EAAqD;AAC1D,MAAIC,MAAJ;;AAEA,QAAMC,aAAa,GAAGP,OAAO,CAACG,gBAAD,CAA7B,CAH0D,CAGT;;AAEjD,MAAIK,qBAAqB,CAACD,aAAD,CAAzB,EAA0C;AACxC,WAAOA,aAAP;AACD;;AAED,SAAO,IAAIN,YAAJ,CACLM,aAAa,CAACE,OADT,EAEL,CAACH,MAAM,GAAGC,aAAa,CAACH,KAAxB,MAAmC,IAAnC,IAA2CE,MAAM,KAAK,KAAK,CAA3D,GACIA,MADJ,GAEIF,KAJC,EAKLG,aAAa,CAACG,MALT,EAMLH,aAAa,CAACI,SANT,EAOLN,IAPK,EAQLE,aARK,CAAP;AAUD;;AAED,SAASC,qBAAT,CAA+BI,KAA/B,EAAsC;AACpC,SAAOC,KAAK,CAACC,OAAN,CAAcF,KAAK,CAACP,IAApB,CAAP;AACD","sourcesContent":["import { toError } from '../jsutils/toError.mjs';\r\nimport { GraphQLError } from './GraphQLError.mjs';\r\n/**\r\n * Given an arbitrary value, presumably thrown while attempting to execute a\r\n * GraphQL operation, produce a new GraphQLError aware of the location in the\r\n * document responsible for the original Error.\r\n */\r\n\r\nexport function locatedError(rawOriginalError, nodes, path) {\r\n  var _nodes;\r\n\r\n  const originalError = toError(rawOriginalError); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\r\n\r\n  if (isLocatedGraphQLError(originalError)) {\r\n    return originalError;\r\n  }\r\n\r\n  return new GraphQLError(\r\n    originalError.message,\r\n    (_nodes = originalError.nodes) !== null && _nodes !== void 0\r\n      ? _nodes\r\n      : nodes,\r\n    originalError.source,\r\n    originalError.positions,\r\n    path,\r\n    originalError,\r\n  );\r\n}\r\n\r\nfunction isLocatedGraphQLError(error) {\r\n  return Array.isArray(error.path);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}