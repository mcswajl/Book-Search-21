{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\r\n * Unique operation types\r\n *\r\n * A GraphQL document is only valid if it has only one type per operation.\r\n */\n\nexport function UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes; // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n\n    const operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(new GraphQLError(`Type for ${operation} already defined in the schema. It cannot be redefined.`, operationType));\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(new GraphQLError(`There can be only one ${operation} type in schema.`, [alreadyDefinedOperationType, operationType]));\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}","map":{"version":3,"sources":["C:/BootCamp/Book-Search-21/node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs"],"names":["GraphQLError","UniqueOperationTypesRule","context","schema","getSchema","definedOperationTypes","Object","create","existingOperationTypes","query","getQueryType","mutation","getMutationType","subscription","getSubscriptionType","SchemaDefinition","checkOperationTypes","SchemaExtension","node","_node$operationTypes","operationTypesNodes","operationTypes","operationType","operation","alreadyDefinedOperationType","reportError"],"mappings":"AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;;;;;;AAKA,OAAO,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;AAChD,QAAMC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAf;AACA,QAAMC,qBAAqB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA9B;AACA,QAAMC,sBAAsB,GAAGL,MAAM,GACjC;AACEM,IAAAA,KAAK,EAAEN,MAAM,CAACO,YAAP,EADT;AAEEC,IAAAA,QAAQ,EAAER,MAAM,CAACS,eAAP,EAFZ;AAGEC,IAAAA,YAAY,EAAEV,MAAM,CAACW,mBAAP;AAHhB,GADiC,GAMjC,EANJ;AAOA,SAAO;AACLC,IAAAA,gBAAgB,EAAEC,mBADb;AAELC,IAAAA,eAAe,EAAED;AAFZ,GAAP;;AAKA,WAASA,mBAAT,CAA6BE,IAA7B,EAAmC;AACjC,QAAIC,oBAAJ,CADiC,CAGjC;;AAEA;;;AACA,UAAMC,mBAAmB,GACvB,CAACD,oBAAoB,GAAGD,IAAI,CAACG,cAA7B,MAAiD,IAAjD,IACAF,oBAAoB,KAAK,KAAK,CAD9B,GAEIA,oBAFJ,GAGI,EAJN;;AAMA,SAAK,MAAMG,aAAX,IAA4BF,mBAA5B,EAAiD;AAC/C,YAAMG,SAAS,GAAGD,aAAa,CAACC,SAAhC;AACA,YAAMC,2BAA2B,GAAGnB,qBAAqB,CAACkB,SAAD,CAAzD;;AAEA,UAAIf,sBAAsB,CAACe,SAAD,CAA1B,EAAuC;AACrCrB,QAAAA,OAAO,CAACuB,WAAR,CACE,IAAIzB,YAAJ,CACG,YAAWuB,SAAU,yDADxB,EAEED,aAFF,CADF;AAMD,OAPD,MAOO,IAAIE,2BAAJ,EAAiC;AACtCtB,QAAAA,OAAO,CAACuB,WAAR,CACE,IAAIzB,YAAJ,CACG,yBAAwBuB,SAAU,kBADrC,EAEE,CAACC,2BAAD,EAA8BF,aAA9B,CAFF,CADF;AAMD,OAPM,MAOA;AACLjB,QAAAA,qBAAqB,CAACkB,SAAD,CAArB,GAAmCD,aAAnC;AACD;AACF;;AAED,WAAO,KAAP;AACD;AACF","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\r\n\r\n/**\r\n * Unique operation types\r\n *\r\n * A GraphQL document is only valid if it has only one type per operation.\r\n */\r\nexport function UniqueOperationTypesRule(context) {\r\n  const schema = context.getSchema();\r\n  const definedOperationTypes = Object.create(null);\r\n  const existingOperationTypes = schema\r\n    ? {\r\n        query: schema.getQueryType(),\r\n        mutation: schema.getMutationType(),\r\n        subscription: schema.getSubscriptionType(),\r\n      }\r\n    : {};\r\n  return {\r\n    SchemaDefinition: checkOperationTypes,\r\n    SchemaExtension: checkOperationTypes,\r\n  };\r\n\r\n  function checkOperationTypes(node) {\r\n    var _node$operationTypes;\r\n\r\n    // See: https://github.com/graphql/graphql-js/issues/2203\r\n\r\n    /* c8 ignore next */\r\n    const operationTypesNodes =\r\n      (_node$operationTypes = node.operationTypes) !== null &&\r\n      _node$operationTypes !== void 0\r\n        ? _node$operationTypes\r\n        : [];\r\n\r\n    for (const operationType of operationTypesNodes) {\r\n      const operation = operationType.operation;\r\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\r\n\r\n      if (existingOperationTypes[operation]) {\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `Type for ${operation} already defined in the schema. It cannot be redefined.`,\r\n            operationType,\r\n          ),\r\n        );\r\n      } else if (alreadyDefinedOperationType) {\r\n        context.reportError(\r\n          new GraphQLError(\r\n            `There can be only one ${operation} type in schema.`,\r\n            [alreadyDefinedOperationType, operationType],\r\n          ),\r\n        );\r\n      } else {\r\n        definedOperationTypes[operation] = operationType;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}